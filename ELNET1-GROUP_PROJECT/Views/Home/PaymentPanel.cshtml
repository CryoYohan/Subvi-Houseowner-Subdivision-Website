@{
    Layout = "_HomeLayout";
    ViewData["Title"] = "Subvi | Bill & Payments";

    string userId = Context.Request.Cookies["Id"];
    string role = Context.Request.Cookies["UserRole"];

    // Declare controller
    string homeController = "";
    string calendarController = "";
    string facilitiesController = "";
    string billController = "";
    string servicesController = "";
    string forumsController = "";
    string feedbacksController = "";
    string resourcesController = "";

    // Default action values
    string homeAction = "";
    string calendarAction = "";
    string facilitiesAction = "";
    string billAction = "";
    string servicesAction = "";
    string forumsAction = "";
    string feedbacksAction = "";
    string resourcesAction = "";

    // Assign controllers/actions based on role
    if (role == "Homeowner")
    {
        homeController = "home"; homeAction = "dashboard";
        calendarController = "home"; calendarAction = "calendar";
        facilitiesController = "home"; facilitiesAction = "facilities";
        billController = "home"; billAction = "bill";
        servicesController = "home"; servicesAction = "services";
        forumsController = "home"; forumsAction = "forums";
        feedbacksController = "home"; feedbacksAction = "feedbacks";
        resourcesController = "home"; resourcesAction = "resources";
    }
}

@section Scripts {
    <script src="~/js/notification-home.js"></script>

}

<link rel="stylesheet" href="~/css/paymentpaneldesign.css" />

<div class="flex flex-row overflow-hidden pt-4 flex-shrink-0">
    @* Sidebar *@
    <div class="bg-white rounded-tr-2xlrounded-br-2xl shadow-md w-56 py-6 h-screen">
        <ul class="space-y-4">
            <li>
                <a class="flex items-center space-x-4 p-3 rounded-l-full sidebar-item hover:bg-gray-100 transition ease-in-out"
                   asp-controller="home" asp-action="dashboard">
                    <i class="fas fa-home text-xl"></i>
                    <span class="font-semibold">Home</span>
                </a>
            </li>
            <li>
                <a class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item transition ease-in-out rounded-l-full"
                   asp-controller="home" asp-action="calendar">
                    <i class="fas fa-calendar-alt text-xl"></i>
                    <span class="font-semibold">Calendar</span>
                </a>
            </li>
            <li>
                <a class="flex items-center space-x-4 p-3 rounded-l-full sidebar-item hover:bg-gray-100 transition ease-in-out"
                   asp-controller="home" asp-action="facilities">
                    <i class="fas fa-building text-xl"></i>
                    <span class="font-semibold">Facilities</span>
                </a>
            </li>
            <li>
                <a class="flex items-center space-x-4 p-3 rounded-l-full sidebar-item active-item"
                   asp-controller="home" asp-action="bill">
                    <i class="fas fa-file-invoice-dollar text-xl"></i>
                    <span class="font-semibold">Bill Payment</span>
                </a>
            </li>
            <li>
                <a class="flex items-center space-x-4 p-3 rounded-l-full sidebar-item hover:bg-gray-100 transition ease-in-out"
                   asp-controller="home" asp-action="services">
                    <i class="fas fa-tools text-xl"></i>
                    <span class="font-semibold">Services</span>
                </a>
            </li>
            <li>
                <a class="flex items-center space-x-4 p-3 rounded-l-full sidebar-item hover:bg-gray-100 transition ease-in-out"
                   asp-controller="home" asp-action="forums">
                    <i class="fas fa-comments text-xl"></i>
                    <span class="font-semibold">Forums Discussion</span>
                </a>
            </li>
            <li>
                <a class="flex items-center space-x-4 p-3 rounded-l-full sidebar-item hover:bg-gray-100 transition ease-in-out"
                   asp-controller="home" asp-action="feedbacks">
                    <i class="fas fa-bullhorn text-xl"></i>
                    <span class="font-semibold">Feedbacks</span>
                </a>
            </li>
            <!-- Resources -->
            <li>
                <a class="flex items-center space-x-4 p-3 rounded-l-full sidebar-item hover:bg-gray-100 transition ease-in-out" asp-controller="@resourcesController" asp-action="@resourcesAction">
                    <i class="fas fa-folder text-xl"></i>
                    <span class="font-semibold">Resources</span>
                </a>
            </li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="flex-1 p-2">
        <div class="w-full mx-auto">
            <!-- Payment Header -->
            <div class="text-center mb-2">
                <h1 class="text-3xl font-bold text-gray-800">Complete Your Payment</h1>
                <p class="text-gray-600 mt-2">Secure payment processed through PayMongo</p>
            </div>

            <!-- Progress Bar -->
            <div class="relative mb-2">
                <div class="flex items-center justify-between">
                    <div class="flex flex-col items-center relative z-10">
                        <div class="w-10 h-10 rounded-full bg-blue-600 text-white flex items-center justify-center transition-all duration-300" id="step1">
                            1
                        </div>
                        <span class="text-sm font-medium mt-2 text-blue-600">Bill Details</span>
                    </div>
                    <div class="flex flex-col items-center relative z-10">
                        <div class="w-10 h-10 rounded-full bg-gray-200 text-gray-600 flex items-center justify-center transition-all duration-300" id="step2">
                            2
                        </div>
                        <span class="text-sm font-medium mt-2 text-gray-500">Payment Method</span>
                    </div>
                    <div class="flex flex-col items-center relative z-10">
                        <div class="w-10 h-10 rounded-full bg-gray-200 text-gray-600 flex items-center justify-center transition-all duration-300" id="step3">
                            3
                        </div>
                        <span class="text-sm font-medium mt-2 text-gray-500">Confirmation</span>
                    </div>
                </div>
                <div class="absolute top-5 left-0 right-0 h-1 bg-gray-200 -z-0">
                    <div class="h-full bg-blue-600 transition-all duration-500" id="progressBar" style="width: 33%"></div>
                </div>
            </div>

            <!-- Section 1: Bill Details -->
            <div class="rounded-xl shadow-lg overflow-hidden mb-8 transition-all duration-300 transform"  style="background-color: white" id="section1">
                <div class="p-8">
                    <h2 class="text-xl font-semibold text-gray-800 mb-6 flex items-center">
                        <span class="bg-blue-100 text-blue-600 w-8 h-8 rounded-full flex items-center justify-center mr-3">1</span>
                        Bill Information
                    </h2>
                
                    <div class="space-y-4">
                        <div class="flex justify-between py-3 border-b border-gray-100">
                            <span class="text-gray-600">Reference Number</span>
                            <span class="font-medium">@ViewBag.Bill.BillId</span>
                        </div>
                        <div class="flex justify-between py-3 border-b border-gray-100">
                            <span class="text-gray-600">Description</span>
                            <span class="font-medium text-right">@ViewBag.Bill.BillName</span>
                        </div>
                        <div class="flex justify-between py-3 border-b border-gray-100">
                            <span class="text-gray-600">Amount Due</span>
                            <span class="font-medium">₱@ViewBag.Bill.BillAmount.ToString("N2")</span>
                        </div>
                        <div class="flex justify-between py-4">
                            <span class="text-lg font-semibold">Total Amount</span>
                            <span class="text-xl font-bold text-blue-600">₱@((ViewBag.Bill.BillAmount).ToString("N2"))</span>
                        </div>
                    </div>

                    <div class="mt-8 flex justify-end">
                        <button onclick="goToPaymentMethod()" class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition duration-200 flex items-center">
                            Continue
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Section 2: Payment Method -->
            <div class="rounded-xl shadow-lg overflow-hidden hidden mb-8 transition-all duration-300 transform" id="section2" style="background-color: white">
                <div class="p-8">
                    <h2 class="text-xl font-semibold text-gray-800 mb-6 flex items-center">
                        <span class="bg-blue-100 text-blue-600 w-8 h-8 rounded-full flex items-center justify-center mr-3">2</span>
                        Select Payment Method
                    </h2>

                    <div class="grid grid-cols-2 gap-4 mb-8">
                        <!-- GCash -->
                        <div class="payment-method-card border border-gray-200 rounded-lg p-4 cursor-pointer transition-all hover:border-blue-300 h-full relative">
                            <label class="block cursor-pointer w-full">
                                <input type="radio" name="paymentMethod" value="GCash" class="sr-only">
                                <div class="bg-blue-50 p-4 rounded-lg flex justify-center">
                                    <img src="/images/payment/gcash.png" alt="GCash" class="h-12">
                                </div>
                                <div class="mt-3 text-center">
                                    <div class="font-medium text-gray-800">GCash</div>
                                    <div class="text-sm text-gray-500">Pay with mobile wallet</div>
                                </div>
                            </label>
                            <input type="text" name="paymentNumber_GCash" class="payment-number-input hidden mt-3 border border-gray-300 rounded px-3 py-2 w-full" placeholder="Enter GCash number">
                            <div class="error-message text-red-500 text-sm hidden">Invalid GCash number. It should be a valid mobile number starting with +63 and 11 digits long.</div>
                        </div>

                        <!-- Maya -->
                        <div class="payment-method-card border border-gray-200 rounded-lg p-4 cursor-pointer transition-all hover:border-blue-300 h-full relative">
                            <label class="block cursor-pointer w-full">
                                <input type="radio" name="paymentMethod" value="Maya" class="sr-only">
                                <div class="bg-purple-50 p-4 rounded-lg flex justify-center">
                                    <img src="/images/payment/maya.png" alt="Maya" class="h-12">
                                </div>
                                <div class="mt-3 text-center">
                                    <div class="font-medium text-gray-800">Maya</div>
                                    <div class="text-sm text-gray-500">Pay with mobile wallet</div>
                                </div>
                            </label>
                            <input type="text" name="paymentNumber_Maya" class="payment-number-input hidden mt-3 border border-gray-300 rounded px-3 py-2 w-full" placeholder="Enter Maya number">
                            <div class="error-message text-red-500 text-sm hidden">Maya number should be numeric only.</div>
                        </div>

                        <!-- GrabPay -->
                        <div class="payment-method-card border border-gray-200 rounded-lg p-4 cursor-pointer transition-all hover:border-blue-300 h-full relative">
                            <label class="block cursor-pointer w-full">
                                <input type="radio" name="paymentMethod" value="GrabPay" class="sr-only">
                                <div class="bg-green-50 p-4 rounded-lg flex justify-center">
                                    <img src="/images/payment/grabpay.png" alt="GrabPay" class="h-12">
                                </div>
                                <div class="mt-3 text-center">
                                    <div class="font-medium text-gray-800">GrabPay</div>
                                    <div class="text-sm text-gray-500">Pay with Grab app</div>
                                </div>
                            </label>
                            <input type="text" name="paymentNumber_GrabPay" class="payment-number-input hidden mt-3 border border-gray-300 rounded px-3 py-2 w-full" placeholder="Enter GrabPay number">
                            <div class="error-message text-red-500 text-sm hidden">GrabPay number should be numeric only.</div>
                        </div>

                        <!-- Credit/Debit Card -->
                        <div class="payment-method-card border border-gray-200 rounded-lg p-4 cursor-pointer transition-all hover:border-blue-300 h-full relative">
                            <label class="block cursor-pointer w-full">
                                <input type="radio" name="paymentMethod" value="Card" class="sr-only">
                                <div class="bg-yellow-50 p-4 rounded-lg flex justify-center">
                                    <img src="/images/payment/cards.png" alt="Credit/Debit Card" class="h-12">
                                </div>
                                <div class="mt-3 text-center">
                                    <div class="font-medium text-gray-800">Card</div>
                                    <div class="text-sm text-gray-500">Credit/Debit card</div>
                                </div>
                            </label>
                            <input type="text" name="paymentNumber_Card" class="payment-number-input hidden mt-3 border border-gray-300 rounded px-3 py-2 w-full" placeholder="Enter Card number">
                            <div class="error-message text-red-500 text-sm hidden">Card number should be a valid number and 16 digits long.</div>
                        </div>
                    </div>

                    <!-- Hidden inputs for saving selected values -->
                    <input type="hidden" id="selectedMethod" name="selectedMethod" />
                    <input type="hidden" id="formPaymentNumber" name="formPaymentNumber" />

                    <div class="flex justify-between mt-8">
                        <button onclick="goBacktoSection1()" class="px-6 py-2 border border-gray-300 hover:bg-gray-50 text-gray-700 rounded-lg transition duration-200 flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                            </svg>
                            Back
                        </button>
                        <button onclick="nextSection()" class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition duration-200 flex items-center">
                            Continue
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Section 3: Confirmation -->
            <div class="rounded-xl shadow-lg overflow-hidden hidden transition-all duration-300 transform" style="background-color: white" id="section3">
                <div class="p-2">
                    <h2 class="text-xl font-semibold text-gray-800 mb-6 flex items-center">
                        <span class="bg-blue-100 text-blue-600 w-8 h-8 rounded-full flex items-center justify-center mr-3">3</span>
                        Confirm Your Payment
                    </h2>

                    <div class="flex flex-col lg:flex-row gap-6">
                        <!-- Left: Bill Summary -->
                        <div class="flex-1 bg-gray-50 rounded-lg p-6">
                            <h3 class="text-lg font-medium text-gray-800 mb-4">Bill Summary</h3>
                            <div class="space-y-3">
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Reference Number</span>
                                    <span class="font-medium">@ViewBag.Bill.BillId</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Description</span>
                                    <span class="font-medium">@ViewBag.Bill.BillName</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Amount Due</span>
                                    <span class="font-medium">₱@ViewBag.Bill.BillAmount.ToString("N2")</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Service Fee</span>
                                    <span class="font-medium">₱200.00</span>
                                </div>
                                <div class="flex justify-between pt-3 border-t border-gray-200 mt-3">
                                    <span class="text-lg font-semibold">Total Amount</span>
                                    <span class="text-lg font-bold text-blue-600">₱@((ViewBag.Bill.BillAmount).ToString("N2"))</span>
                                </div>
                            </div>
                        </div>

                        <!-- Right: Payment Method Info -->
                        <div class="flex-1 bg-gray-50 rounded-lg p-6 flex flex-col justify-between">
                            <div>
                                <div class="flex items-center justify-between mb-4">
                                    <h3 class="text-lg font-medium text-gray-800">Payment Method</h3>
                                    <button onclick="changePaymentMethod()" class="text-sm text-blue-600 hover:underline flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                            <path d="M17.414 2.586a2 2 0 00-2.828 0L8 9.172V11h1.828l6.586-6.586a2 2 0 000-2.828zM7 12v2h2l7.293-7.293-2-2L7 12zm-1 0H3v5a1 1 0 001 1h5v-3H6a1 1 0 01-1-1v-2z" />
                                        </svg>
                                        Change
                                    </button>
                                </div>

                                <div id="selectedPaymentMethod" class="flex items-center mb-6">
                                    <img id="paymentMethodImage" src="" alt="" class="h-10 mr-4">
                                    <div>
                                        <div class="font-medium text-gray-800" id="paymentMethodName"></div>
                                        <div class="text-sm text-gray-500" id="paymentMethodDescription"></div>
                                    </div>
                                </div>

                                <div id="card-container" class="mt-4"></div>
                                <div id="payment-status-container" class="mt-2 text-sm text-red-500"></div>

                                <div class="flex items-start mb-4">
                                    <input type="checkbox" id="terms" name="terms" required
                                           class="mt-1 mr-3 rounded border-gray-300 text-blue-600 focus:ring-blue-500 h-5 w-5">
                                    <label for="terms" class="text-sm text-gray-600">
                                        I agree to the <a href="#" class="text-blue-600 hover:underline">Terms and Conditions</a>
                                        and authorize the payment of ₱@((ViewBag.Bill.BillAmount).ToString("N2"))
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Buttons below columns -->
                    <div class="flex justify-between mt-6">
                        <button onclick="goToPaymentMethod()" class="px-6 py-2 border border-gray-300 hover:bg-gray-50 text-gray-700 rounded-lg transition duration-200 flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                            </svg>
                            Back
                        </button>
                        <button onclick="confirmAndPay()" class="px-8 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition duration-200 flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" />
                            </svg>
                            Confirm and Pay
                        </button>
                    </div>
                </div>
            </div>

            <!-- Security Badges -->
            <div class="mt-12 flex justify-center space-x-8">
                <img src="/images/payment/ssl-secure.png" alt="SSL Secure" class="h-10 opacity-70 hover:opacity-100 transition">
                <img src="/images/payment/pci-dss.png" alt="PCI DSS Compliant" class="h-10 opacity-70 hover:opacity-100 transition">
            </div>
        </div>
    </div>
</div>

@if (ViewBag.Bill != null && ViewBag.Bill.Status == "Paid")
{
    <script>
        window.location.href = '@Url.Action("PaymentPanel", "Home")';
    </script>
}

<script>
    let currentSection = 1;
    const totalSections = 3;

    function updateProgress() {
        const progress = document.getElementById('progressBar');
        const targetWidth = (currentSection / totalSections) * 100;
        progress.style.width = `${targetWidth}%`;

        for (let i = 1; i <= totalSections; i++) {
            const step = document.getElementById(`step${i}`);
            setTimeout(() => {
                if (i < currentSection) {
                    step.classList.remove('bg-gray-200', 'text-gray-600');
                    step.classList.add('bg-green-500', 'text-white');
                } else if (i === currentSection) {
                    step.classList.remove('bg-gray-200', 'text-gray-600', 'bg-green-500');
                    step.classList.add('bg-blue-600', 'text-white');
                } else {
                    step.classList.remove('bg-blue-600', 'text-white', 'bg-green-500');
                    step.classList.add('bg-gray-200', 'text-gray-600');
                }
            }, 150 * i); // Delay step animation slightly
        }
    }

    const methodCards = document.querySelectorAll('.payment-method-card');

    methodCards.forEach(card => {
        const radio = card.querySelector('input[type="radio"]');
        const input = card.querySelector('.payment-number-input');

        card.addEventListener('click', (e) => {
            if (input && input.contains(e.target)) return; // allow typing inside input

            if (!radio.checked) {
                radio.checked = true;

                // Reset styles and hide all inputs
                methodCards.forEach(c => {
                    c.classList.remove('border-blue-500', 'bg-blue-50');
                    c.querySelector('.payment-number-input')?.classList.add('hidden');
                });

                // Apply selection styles and show input
                card.classList.add('border-blue-500', 'bg-blue-50');
                if (input) {
                    input.classList.remove('hidden');
                    input.value = '';
                    input.focus();
                }
            }
        });

        // Add real-time input restriction for GCash and Maya
        if (input && (radio.value === 'GCash' || radio.value === 'Maya')) {
            input.addEventListener('input', () => {
                let raw = input.value.replace(/[^+\d]/g, '');

                if (raw.startsWith('+639')) {
                    raw = raw.slice(0, 13); // +639XXXXXXXXX
                } else if (raw.startsWith('09')) {
                    raw = raw.slice(0, 11); // 09XXXXXXXXX
                } else {
                    raw = raw.slice(0, 13); // fallback limit
                }

                input.value = raw;

                // Remove error visuals
                const error = input.nextElementSibling;
                if (error) error.classList.add('hidden');
                input.classList.remove('border-red-500', 'ring-2', 'ring-red-300');
            });
        }
    });

    function goToPaymentMethod() {
        currentSection = 2;
        document.getElementById("section1").classList.add("hidden");
        document.getElementById("section3").classList.add("hidden");
        document.getElementById("section2").classList.remove("hidden");
        updateProgress();
    }

    function goBacktoSection1() {
        currentSection = 1;
        document.getElementById("section2").classList.add("hidden");
        document.getElementById("section1").classList.remove("hidden");
        updateProgress();
    }

    function nextSection() {
        const selectedRadio = document.querySelector('input[name="paymentMethod"]:checked');
        if (!selectedRadio) {
            alert("Please select a payment method.");
            return;
        }

        const selectedCard = selectedRadio.closest('.payment-method-card');
        if (!selectedCard) {
            console.error("Selected radio button does not have a valid parent card.");
            return;
        }

        const method = selectedRadio.value;
        const input = selectedCard.querySelector('.payment-number-input');
        const number = input ? input.value.trim() : '';

        // Hide all error messages first
        const errorMessages = document.querySelectorAll('.error-message');
        errorMessages.forEach(msg => msg.classList.add('hidden'));

        let isValid = true;
        if (!number) {
            selectedCard.querySelector('.error-message').classList.remove('hidden');
            selectedCard.querySelector('.error-message').textContent = "Please enter your " + method + " number.";
            isValid = false;
        } else {
            const gcashMayaRegex = /^(?:\+639\d{9}|09\d{9})$/;

            if (method === "GCash" || method === "Maya") {
                if (!gcashMayaRegex.test(number)) {
                    selectedCard.querySelector('.error-message').classList.remove('hidden');
                    selectedCard.querySelector('.error-message').textContent =
                        `Invalid ${method} number. It should start with +639 or 09 and be 11 to 13 digits long.`;
                    isValid = false;
                }
            } else if (method === "GrabPay") {
                if (!/^\d+$/.test(number)) {
                    selectedCard.querySelector('.error-message').classList.remove('hidden');
                    selectedCard.querySelector('.error-message').textContent = method + " number should be numeric only.";
                    isValid = false;
                }
            } else if (method === "Card") {
                const digitsOnly = number.replace(/\s+/g, '');

                if (!/^\d{16}$/.test(digitsOnly)) {
                    selectedCard.querySelector('.error-message').classList.remove('hidden');
                    selectedCard.querySelector('.error-message').textContent = "Card number should be 16 digits long.";
                    isValid = false;
                }
            }
        }

        if (!isValid) return;

        const methodInput = document.getElementById("selectedMethod");
        const numberInput = document.getElementById("formPaymentNumber");

        if (!methodInput || !numberInput) {
            console.error("Hidden input fields not found in the DOM.");
            return;
        }

        methodInput.value = method;
        numberInput.value = number;

        // Proceed to next section
        currentSection = 3;
        document.getElementById("section2").classList.add("hidden");
        document.getElementById("section3").classList.remove("hidden");

        // Update Section 3 preview
        document.getElementById("paymentMethodImage").src = `/images/payment/${method.toLowerCase()}.png`;
        document.getElementById("paymentMethodName").textContent = method;
        document.getElementById("paymentMethodDescription").textContent = number;

        updateProgress();
    }

    function changePaymentMethod() {
        // Go back to Section 2 with animation
        document.getElementById(`section${currentSection}`).classList.add('hidden');
        currentSection = 2;
        document.getElementById(`section${currentSection}`).classList.remove('hidden');
        document.getElementById(`section${currentSection}`).classList.add('animate-fadeIn');
        updateProgress();

        // Restore selected method and input value
        const method = document.getElementById('selectedMethod').value;
        const number = document.getElementById('formPaymentNumber').value;

        const radio = [...document.querySelectorAll('input[name="paymentMethod"]')]
                        .find(r => r.value === method);

        if (radio) {
            radio.checked = true;
            radio.dispatchEvent(new Event('change')); // Triggers input show & logic in DOMContentLoaded

            // Wait a tick for input to appear (since it's shown by event handler)
            setTimeout(() => {
                const config = {
                    GCash: 'paymentNumber_GCash',
                    Maya: 'paymentNumber_Maya',
                    GrabPay: 'paymentNumber_GrabPay',
                    Card: 'paymentNumber_Card'
                };
                const inputName = config[method];
                if (inputName) {
                    const input = document.querySelector(`input[name="${inputName}"]`);
                    if (input) {
                        input.classList.remove('hidden');
                        input.value = number;
                        input.focus();

                        // Reapply input restrictions (optional since the DOMContentLoaded already sets it)
                        input.dispatchEvent(new Event('input'));
                    }
                }
            }, 10); // slight delay to ensure input is revealed before setting value
        }
    }

    async function confirmAndPay() {
        const method = document.getElementById('selectedMethod').value;
        const number = document.getElementById('formPaymentNumber').value;
        const termsCheckbox = document.getElementById('terms');

        // Remove previous error state
        termsCheckbox.classList.remove('border-red-500', 'ring-2', 'ring-red-300');
        const existingError = document.getElementById('termsError');
        if (existingError) existingError.remove();

        // Check if terms checkbox is checked
        if (!termsCheckbox.checked) {
            // Highlight checkbox
            termsCheckbox.classList.add('border-red-500', 'ring-2', 'ring-red-300', 'shake');

            // Remove the shake class after animation ends so it can be triggered again
            setTimeout(() => {
                termsCheckbox.classList.remove('shake');
            }, 300);

            // Create error message if it doesn't exist
            if (!document.getElementById('termsError')) {
                const errorMessage = document.createElement('div');
                errorMessage.id = 'termsError';
                errorMessage.className = 'text-sm text-red-500 mt-1 ml-8';
                errorMessage.textContent = 'This is required';
                termsCheckbox.parentNode.insertAdjacentElement('afterend', errorMessage);
            }
            return;
        }

        // Validate method and number
        if (!method || !number) {
            Swal.fire('Missing Details', 'Please complete payment details.', 'warning');
            return;
        }

        const amount = parseFloat("@ViewBag.Bill.BillAmount");
        const billId = parseInt("@ViewBag.Bill.BillId");

        Swal.fire({
            title: 'Confirm Payment',
            text: `You're about to pay ₱${amount.toFixed(2)} via ${method}`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, Pay Now',
            cancelButtonText: 'Cancel'
        }).then(async (result) => {
            if (result.isConfirmed) {
                const response = await fetch('/Home/PaymentInsertData', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({
                        billId,
                        amountPaid: amount,
                        paymentMethod: method
                    })
                });

                const res = await response.json();

                if (res.success) {
                    Swal.fire('Success', res.message, 'success').then(() => {
                        window.location.href = res.redirect;
                    });
                } else {
                    Swal.fire('Error', res.message, 'error').then(() => {
                        if (res.redirect) {
                            window.location.href = res.redirect;
                        }
                    });
                }
            }
        });
    }

    // Initialize
        document.addEventListener('DOMContentLoaded', () => {
        updateProgress();

        const methodCards = document.querySelectorAll('.payment-method-card');
        const radioButtons = document.querySelectorAll('input[name="paymentMethod"]');
        const inputSelectors = {
            GCash: {
                name: 'paymentNumber_GCash',
                validate: (val) => /^\+63\d{10}$/.test(val),
                type: 'tel'
            },
            Maya: {
                name: 'paymentNumber_Maya',
                validate: (val) => /^\d+$/.test(val),
                type: 'tel'
            },
            GrabPay: {
                name: 'paymentNumber_GrabPay',
                validate: (val) => /^\d+$/.test(val),
                type: 'tel'
            },
            Card: {
                name: 'paymentNumber_Card',
                validate: (val) => /^\d{16}$/.test(val),
                type: 'tel'
            }
        };

        function hideAllInputs() {
            document.querySelectorAll('.payment-number-input').forEach(input => input.classList.add('hidden'));
            document.querySelectorAll('.error-message').forEach(msg => msg.classList.add('hidden'));
        }

        radioButtons.forEach(radio => {
            radio.addEventListener('change', () => {
                hideAllInputs();

                const selected = radio.value;
                const config = inputSelectors[selected];
                if (config) {
                    const input = document.querySelector(`input[name="${config.name}"]`);
                    input.classList.remove('hidden');
                    input.focus();
                    input.setAttribute('type', config.type);

                    // Don't reset value to allow re-clicking without loss
                    input.oninput = () => {
                        const raw = input.value;
                        if (selected === 'GCash') {
                            input.value = raw.replace(/[^+\d]/g, '').replace(/(?!^\+63)\+/g, '');
                        } else {
                            input.value = raw.replace(/\D/g, '');
                        }

                        const error = input.nextElementSibling;
                        if (error) error.classList.add('hidden');
                        input.classList.remove('border-red-500', 'ring-2', 'ring-red-300');
                    };
                }
            });
        });

        // Auto-select radio and prevent unnecessary reset
        methodCards.forEach(card => {
            card.addEventListener('click', (e) => {
                const radio = card.querySelector('input[type="radio"]');
                const alreadyChecked = radio.checked;

                // Don't toggle everything again if already selected and clicked inside input
                const input = card.querySelector('.payment-number-input');
                if (alreadyChecked && input && input.contains(e.target)) return;

                if (!alreadyChecked) {
                    radio.checked = true;
                    radio.dispatchEvent(new Event('change'));
                }
            });
        });
    });
</script>

<script>
    /* https://sandbox.web.squarecdn.com/v1/square.js
    async function confirmAndPay() {
        const payments = Square.payments('sandbox-sq0idb-9k-Y5hkb_oFfU_pS2ZItgw', 'LEWRCKYGJ4JFS');
        const card = await payments.card();
        await card.attach('#card-container');

        const result = await card.tokenize();
        if (result.status === 'OK') {
            const token = result.token;

            // Send token and amount to the backend to process the payment
            const response = await fetch('/Home/ProcessSquarePayment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    token: token,
                    amount: @((ViewBag.Bill.BillAmount).ToString("F2"))  // Ensure amount is correctly passed
                })
            });

            const data = await response.json();
            if (data.success) {
                alert("Payment successful!");
                // Redirect or update UI
            } else {
                document.getElementById('payment-status-container').textContent = 'Payment failed: ' + data.message;
            }
        } else {
            document.getElementById('payment-status-container').textContent = 'Tokenization failed: ' + result.errors[0].message;
        }
    }*/
</script>
