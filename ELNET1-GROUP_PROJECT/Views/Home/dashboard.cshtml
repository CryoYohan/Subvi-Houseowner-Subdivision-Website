@{
    Layout = "_HomeLayout";
    ViewData["Title"] = "Subvi | Home";

    // Retrieve the user's role from cookies
    string role = Context.Request.Cookies["UserRole"];

    // Declare controller
    string homeController = "";
    string calendarController = "";
    string facilitiesController = "";
    string billController = "";
    string servicesController = "";
    string forumsController = "";
    string feedbacksController = "";
    string resourcesController = "";

    // Default action values
    string homeAction = "";
    string calendarAction = "";
    string facilitiesAction = "";
    string billAction = "";
    string servicesAction = "";
    string forumsAction = "";
    string feedbacksAction = "";
    string resourcesAction = "";

     if (role == "Homeowner")
    {
        homeController = "home"; homeAction = "dashboard";
        calendarController = "home"; calendarAction = "calendar";
        facilitiesController = "home"; facilitiesAction = "facilities";
        billController = "home"; billAction = "bill";
        servicesController = "home"; servicesAction = "services";
        forumsController = "home"; forumsAction = "forums";
        feedbacksController = "home"; feedbacksAction = "feedbacks";
        resourcesController = "home"; resourcesAction = "resources";
    }
}

<style rel="stylesheet" href="~/css/homeowner-dashboard.css"></style>

@* Sidebar *@
<div class="flex flex-row overflow-hidden pt-4 flex-shrink-0">
    <div class="bg-white rounded-tr-2xl rounded-br-2xl shadow-md w-56 py-6">
        <ul class="space-y-4">
             <!-- Home -->
            <li>
                <a class="flex items-center space-x-4 p-3 rounded-l-full sidebar-item active-item"
                   asp-controller="home" asp-action="dashboard">
                    <i class="fas fa-home text-xl"></i>
                    <span class="font-semibold">Home</span>
                </a>
            </li>
            <li>
                <a class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item transition ease-in-out rounded-l-full"
                   asp-controller="home" asp-action="calendar">
                    <i class="fas fa-calendar-alt text-xl"></i>
                    <span class="font-semibold">Calendar</span>
                </a>
            </li>

            <!-- Facilities -->
            <li>
                <a class="flex items-center space-x-4 p-3 rounded-l-full sidebar-item hover:bg-gray-100 transition ease-in-out" asp-controller="@facilitiesController" asp-action="@facilitiesAction">
                    <i class="fas fa-building text-xl"></i>
                    <span class="font-semibold">Facilities</span>
                </a>
            </li>

            <!-- Bill Payment -->
            <li>
                <a class="flex items-center space-x-4 p-3 rounded-l-full sidebar-item hover:bg-gray-100 transition ease-in-out" asp-controller="@billController" asp-action="@billAction">
                    <i class="fas fa-file-invoice-dollar text-xl"></i>
                    <span class="font-semibold">Bill Payment</span>
                </a>
            </li>

            <!-- Services -->
            <li>
                <a class="flex items-center space-x-4 p-3 rounded-l-full sidebar-item hover:bg-gray-100 transition ease-in-out" asp-controller="@servicesController" asp-action="@servicesAction">
                    <i class="fas fa-tools text-xl"></i>
                    <span class="font-semibold">Services</span>
                </a>
            </li>

            <!-- Forums -->
            <li>
                <a class="flex items-center space-x-4 p-3 rounded-l-full sidebar-item hover:bg-gray-100 transition ease-in-out" asp-controller="@forumsController" asp-action="@forumsAction">
                    <i class="fas fa-comments text-xl"></i>
                    <span class="font-semibold">Forums Discussion</span>
                </a>
            </li>

            <!-- Feedbacks -->
            <li>
                <a class="flex items-center space-x-4 p-3 rounded-l-full sidebar-item hover:bg-gray-100 transition ease-in-out" asp-controller="@feedbacksController" asp-action="@feedbacksAction">
                    <i class="fas fa-bullhorn text-xl"></i>
                    <span class="font-semibold">Feedbacks</span>
                </a>
            </li>

            <!-- Resources -->
            <li>
                <a class="flex items-center space-x-4 p-3 rounded-l-full sidebar-item hover:bg-gray-100 transition ease-in-out" asp-controller="@resourcesController" asp-action="@resourcesAction">
                    <i class="fas fa-folder text-xl"></i>
                    <span class="font-semibold">Resources</span>
                </a>
            </li>
        </ul>
    </div>

    <div class="flex gap-4 p-2 w-full">
        <!-- Left Side Content (Announcements, Polls, Surveys) - 75% -->
        <div class="w-3/4 bg-white shadow-lg rounded-xl p-6">
            <!-- Tab Navigation -->
            <div class="space-x-4 text-center mb-4 border-b border-gray-200">
                <button id="announcements-tab" class="tab-button px-6 py-3 rounded-t-lg font-semibold" onclick="showPanel('announcements')">
                    Announcements
                </button>
                <button id="polls-tab" class="tab-button px-6 py-3 rounded-t-lg font-semibold" onclick="showPanel('polls')">
                    Polls
                </button>

                <!--
                <button id="surveys-tab" class="tab-button px-6 py-3 rounded-t-lg font-semibold" onclick="showPanel('surveys')">
                    Surveys
                </button>
                -->
            </div>

            <!-- Dynamic Panel Content -->
            <div id="announcements-panel" class="panel-content space-y-6">
                <!-- Loading Skeleton -->
                <div class="animate-pulse space-y-6">
                    <div class="flex items-center space-x-4">
                        <div class="h-10 w-10 rounded-full bg-gray-200"></div>
                        <div class="flex-1 space-y-2">
                            <div class="h-4 bg-gray-200 rounded w-1/2"></div>
                            <div class="h-4 bg-gray-200 rounded w-3/4"></div>
                        </div>
                    </div>
                    <div class="space-y-2">
                        <div class="h-4 bg-gray-200 rounded w-5/6"></div>
                        <div class="h-4 bg-gray-200 rounded w-3/4"></div>
                        <div class="h-4 bg-gray-200 rounded w-4/5"></div>
                    </div>
                    <div class="flex items-center space-x-4">
                        <div class="h-10 w-10 rounded-full bg-gray-200"></div>
                        <div class="flex-1 space-y-2">
                            <div class="h-4 bg-gray-200 rounded w-1/2"></div>
                            <div class="h-4 bg-gray-200 rounded w-3/4"></div>
                        </div>
                    </div>
                    <div class="space-y-2">
                        <div class="h-4 bg-gray-200 rounded w-5/6"></div>
                        <div class="h-4 bg-gray-200 rounded w-3/4"></div>
                        <div class="h-4 bg-gray-200 rounded w-4/5"></div>
                    </div>
                    <div class="flex items-center space-x-4">
                        <div class="h-10 w-10 rounded-full bg-gray-200"></div>
                        <div class="flex-1 space-y-2">
                            <div class="h-4 bg-gray-200 rounded w-1/2"></div>
                            <div class="h-4 bg-gray-200 rounded w-3/4"></div>
                        </div>
                    </div>
                    <div class="space-y-2">
                        <div class="h-4 bg-gray-200 rounded w-5/6"></div>
                        <div class="h-4 bg-gray-200 rounded w-3/4"></div>
                        <div class="h-4 bg-gray-200 rounded w-4/5"></div>
                    </div>
                </div>

                <!-- Loaded Content -->
                <div class="announcement-list overflow-y-auto space-y-4" style="max-height: 540px;">
                    <!-- Dynamic content will be inserted here -->
                </div>
            </div>

            <!-- Polls Panel -->
            <div id="polls-panel" class="panel-content">
                <!-- Loading Skeleton -->
                <div class="animate-pulse space-y-6">
                    <!-- Improved loading skeleton -->
                    <div class="flex items-center space-x-4 p-4">
                        <div class="h-12 w-12 rounded-xl bg-gradient-to-r from-gray-100 to-gray-200"></div>
                        <div class="flex-1 space-y-3">
                            <div class="h-4 bg-gradient-to-r from-gray-100 to-gray-200 rounded-full w-2/3"></div>
                            <div class="h-3 bg-gradient-to-r from-gray-100 to-gray-200 rounded-full w-4/5"></div>
                            <div class="h-3 bg-gradient-to-r from-gray-100 to-gray-200 rounded-full w-1/4"></div>
                        </div>
                    </div>
                </div>

                <!-- Poll List -->
                <div id="poll-question" class="poll-list overflow-y-auto space-y-4" style="max-height: 540px;">
                    <!-- Dynamic content will be inserted here -->
                </div>

                <!-- Poll Detail View -->
                <div id="poll-detail-panel" class="hidden transform transition-all duration-300 ease-out">
                    <div class="poll-detail-content space-y-6">
                        <div class="flex items-center justify-between">
                            <h2 class="text-2xl font-bold text-gray-800" id="poll-title"></h2>
                            <button onclick="backToPolls()" class="text-blue-600 hover:text-blue-800 transition-colors">
                                <i class="fas fa-arrow-left mr-2"></i>Back to Polls
                            </button>
                        </div>
                        <p class="text-gray-600 text-lg" id="poll-description"></p>

                        <div id="poll-choices" class="space-y-4">
                            <!-- Choices and Percentages will be inserted here -->
                        </div>

                        <!-- Floating Vote Indicator -->
                        <div id="vote-indicator" class="fixed bottom-8 right-8 bg-blue-600 text-white px-6 py-3 rounded-full shadow-lg transform translate-y-20 opacity-0 transition-all duration-300">
                            <i class="fas fa-check mr-2"></i>Vote Submitted!
                        </div>
                    </div>
                </div>

                <div id="changevotemodal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 backdrop-blur-sm transition-all hidden">
                    <div class="rounded-2xl p-6 max-w-md w-full transform transition-all scale-95 opacity-0" style="background-color: white">
                        <h3 class="text-xl font-bold text-gray-800 mb-4">Change Your Vote?</h3>
                        <p class="text-gray-600 mb-6">You're about to change your previous selection. Are you sure you want to update your vote?</p>
                        <div class="flex gap-3 justify-end">
                            <button class="cancel-btn px-4 py-2 rounded-lg text-gray-600 hover:bg-gray-100 transition-colors">
                                Cancel
                            </button>
                            <button class="confirm-btn px-4 py-2 rounded-lg bg-red-600 text-white hover:bg-red-700 transition-colors">
                                Yes, Change It
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!--
            <div id="surveys-panel" class="panel-content p-4 hidden">
                <div class="text-center py-12">
                    <i class="fas fa-clipboard-list text-4xl text-blue-200 mb-4"></i>
                    <p class="text-gray-500">No ongoing surveys</p>
                </div>
            </div>
            -->
        </div>

        <!-- Right Side Content (Calendar + Events) - 25% -->
        <div class="w-1/4 space-y-4">
            <!-- Calendar Box -->
            <div class="bg-white shadow-md rounded-xl p-6">
                <h3 class="text-xl font-semibold text-blue-800 mb-2">Calendar</h3>
                <div id="calendar-widget" class="mb-4"></div>
            </div>

            <!-- Event List Box -->
            <div class="bg-white shadow-md rounded-xl p-6">
                <h4 class="text-sm font-semibold text-gray-700 mb-3">Upcoming Events</h4>
                <div id="calendar-list-content" class="space-y-3"></div>
            </div>
        </div>
    </div>

    <!-- JavaScript for panel switching and calendar -->
    <script>
        let currentDate = new Date();
        let selectedDay = new Date().getDate();
        let allPolls = [];

        function showPanel(panelName) {
            // Hide all panels
            document.querySelectorAll('.panel-content').forEach(panel => panel.classList.add('hidden'));

            // Show the selected panel
            document.getElementById(`${panelName}-panel`).classList.remove('hidden');

            // Update tab styles
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('text-blue-800', 'bg-blue-200', 'border-blue-800', 'border-b-2');
                btn.classList.add('text-gray-500', 'hover:text-blue-600', 'hover:bg-blue-100');
            });

            // Apply active styles to selected tab
            const activeTab = document.getElementById(`${panelName}-tab`);
            activeTab.classList.remove('text-gray-500', 'hover:text-blue-600', 'hover:bg-blue-100');
            activeTab.classList.add('text-blue-800', 'bg-blue-200', 'border-blue-800', 'border-b-2');
        }

        //For Calendar in right side
        function initializeCalendar() {
            const calendarElement = document.getElementById("calendar-widget");
            const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();
            const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();

            let calendarHTML = `
                <div class="flex justify-between mb-4">
                    <button class="text-xl text-blue-600" onclick="changeMonth(-1)">&#8592;</button>
                    <span class="font-semibold text-lg">${currentDate.toLocaleString('default', { month: 'long' })} ${currentDate.getFullYear()}</span>
                    <button class="text-xl text-blue-600" onclick="changeMonth(1)">&#8594;</button>
                </div>
                <div class='grid grid-cols-7 gap-1 text-sm'>
                    <div class="font-semibold text-gray-600 text-center">Sun</div>
                    <div class="font-semibold text-gray-600 text-center">Mon</div>
                    <div class="font-semibold text-gray-600 text-center">Tue</div>
                    <div class="font-semibold text-gray-600 text-center">Wed</div>
                    <div class="font-semibold text-gray-600 text-center">Thu</div>
                    <div class="font-semibold text-gray-600 text-center">Fri</div>
                    <div class="font-semibold text-gray-600 text-center">Sat</div>
                </div>
                <div class="grid grid-cols-7 gap-1 text-sm">
            `;

            // Blank days before the first day of the month
            for (let i = 0; i < firstDay; i++) {
                calendarHTML += `<div></div>`;
            }

            // Add days of the current month
            for (let i = 1; i <= daysInMonth; i++) {
                const isToday = i === new Date().getDate() && currentDate.getMonth() === new Date().getMonth() && currentDate.getFullYear() === new Date().getFullYear();
                const isSelected = i === selectedDay;

                calendarHTML += `
                    <div class="calendar-day rounded-xl p-2 transition-colors text-center cursor-pointer hover:bg-blue-200
                        ${isToday ? 'bg-blue-800 text-white font-semibold' : ''}
                        ${isSelected && !isToday ? 'border-2 border-blue-800' : ''}"
                        onclick="selectDate(${i})">
                        ${i}
                    </div>
                `;
            }

            calendarHTML += "</div>";
            calendarElement.innerHTML = calendarHTML;
        }

        function changeMonth(direction) {
            currentDate.setMonth(currentDate.getMonth() + direction);
            selectedDay = 1; // Reset selection to the 1st of the new month
            initializeCalendar();
            selectDate(selectedDay);
        }

        function selectDate(day) {
            selectedDay = day;
            initializeCalendar();  // Reinitialize to refresh the selected border

            const selectedDate = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${day}`;
            loadCalendarData(selectedDate);
        }

        async function loadCalendarData(date) {
            try {
                const response = await fetch(`/api/getevents?date=${date}`);
                const data = await response.json();

                const content = data.length > 0
                    ? data.map(event => `
                        <div class="h-22 p-2 border rounded-lg transition-colors bg-blue-50 border-blue-200 text-sm flex items-center gap-2">
                            <i class="fas fa-circle text-xs text-blue-500"></i>
                            <span>${event.description}</span>
                        </div>
                    `).join('')
                    : `<div class="text-sm text-gray-500 p-2">No events for this day.</div>`;

                document.getElementById('calendar-list-content').innerHTML = content;

            } catch (error) {
                console.error('Error loading calendar data:', error);
                document.getElementById('calendar-list-content').innerHTML =
                    `<div class="text-sm text-red-500 p-2">Failed to load events.</div>`;
            }
        }

        // Function to load announcements dynamically
        async function loadAnnouncements() {
            try {
                const response = await fetch('/api/announcement');
                const data = await response.json();
   
                const announcementsContainer = document.querySelector('.announcement-list');
                announcementsContainer.innerHTML = ''; // Clear existing content

                if (data.length === 0) {
                    announcementsContainer.innerHTML = '<p class="text-gray-500">No announcements found.</p>';
                } else {
                    data.forEach(announcement => {
                        const formattedDate = new Date(announcement.datePosted.replace(" ", "T")).toLocaleString('en-US', {
                            month: 'numeric',
                            day: 'numeric',
                            year: 'numeric',
                            hour: 'numeric',
                            minute: 'numeric',
                            hour12: true
                        });

                        const announcementElement = document.createElement('div');
                        announcementElement.classList.add('announcement-card', 'p-4', 'bg-white', 'rounded-xl', 'shadow-sm', 'border', 'border-gray-100', 'hover:shadow-md', 'transition-shadow');
                        announcementElement.innerHTML = `
                            <div class="flex items-start gap-4">
                                <div class="flex-shrink-0">
                                    <div class="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center">
                                        <i class="fas fa-bullhorn text-blue-600"></i>
                                    </div>
                                </div>
                                <div class="flex-1">
                                    <h3 class="font-semibold text-gray-800">${announcement.title}</h3>
                                    <p class="text-gray-600 text-sm mt-1">${announcement.description}</p>
                                    <div class="flex items-center gap-2 mt-3 text-xs text-gray-400">
                                        <i class="fas fa-user"></i>
                                        <span>${announcement.postedBy}</span>
                                        <i class="fas fa-clock ml-2"></i>
                                        <span>${formattedDate.replace(',', ' at')}</span>
                                    </div>
                                </div>
                            </div>
                        `;
                        announcementsContainer.appendChild(announcementElement);
                    });
                }

                // Hide loading skeleton and show loaded content
                document.querySelector('#announcements-panel .animate-pulse').classList.add('hidden');
                announcementsContainer.classList.remove('hidden');
            } catch (error) {
                console.error('Error loading announcements:', error);
            }
        }

        // For Polls Display
        async function loadPolls() {
            try {
                const response = await fetch('/api/polls');
                const data = await response.json();
                console.log(data)
                allPolls = data;
                renderPolls(data);
            } catch (error) {
                console.error('Error loading polls:', error);
            }
        }

        // Function to render poll list
         function renderPolls(polls) {
            const pollsContainer = document.querySelector('.poll-list');
            pollsContainer.innerHTML = '';

            if (polls.length === 0) {
                pollsContainer.innerHTML = `<div class="text-center py-12 animate-fade-in">
                    <div class="mx-auto mb-6 w-16 h-16 bg-blue-100 rounded-2xl flex items-center justify-center">
                        <i class="fas fa-chart-pie text-2xl text-blue-600"></i>
                    </div>
                    <p class="text-gray-500 font-medium">No active polls available</p>
                    <p class="text-sm text-gray-400 mt-2">Check back later for new polls!</p>
                </div>`;
                return;
            }

            polls.forEach((poll, index) => {
                const pollElement = document.createElement('div');
                pollElement.classList.add(
                    'poll-card', 'p-6', 'bg-white', 'rounded-2xl', 'shadow-sm',
                    'hover:shadow-md', 'transition-all', 'duration-300', 'border', 'border-gray-100',
                    'transform', 'hover:-translate-y-1', 'animate-fade-in', 'relative'
                );

                pollElement.style.animationDelay = `${index * 50}ms`;

                pollElement.innerHTML = `
                    <div class="flex items-start gap-4 hover:blue-100 cursor-pointer">
                        <div class="flex-shrink-0">
                            <div class="h-12 w-12 rounded-xl bg-blue-100 flex items-center justify-center">
                                <i class="fas fa-poll text-blue-600 text-lg"></i>
                            </div>
                        </div>
                        <div class="flex-1">
                            <h3 class="font-bold text-gray-800 text-lg">${poll.title}</h3>
                            <p class="text-gray-600 text-sm mt-2">${poll.description}</p>
                            <div class="mt-4 flex items-center text-sm text-gray-400">
                                <i class="fas fa-clock mr-2"></i>
                                <span>Created ${new Date(poll.startDate).toLocaleDateString()}</span>
                            </div>

                            ${
                                poll.votedChoice
                                ? `<div class="mt-3 text-sm text-green-600 font-medium flex items-center gap-2">
                                    <i class="fas fa-check-circle text-green-500"></i>
                                    Voted: ${poll.votedChoice}
                                </div>`
                                : ''
                            }
                        </div>
                    </div>
                `;

                pollElement.onclick = () => showPollDetail(poll.pollId);
                pollsContainer.appendChild(pollElement);
            });
            document.querySelector('#polls-panel .animate-pulse').classList.add('hidden');
            pollsContainer.classList.remove('hidden');
        }

                async function showPollDetail(pollId) {
            document.getElementById('poll-question').classList.add('hidden');
            const detailPanel = document.getElementById('poll-detail-panel');
            detailPanel.classList.remove('hidden');
            detailPanel.style.opacity = '0';
            detailPanel.style.transform = 'translateX(20px)';

            setTimeout(() => {
                detailPanel.style.opacity = '1';
                detailPanel.style.transform = 'translateX(0)';
            }, 50);

            const poll = allPolls.find(p => p.pollId === pollId);
            if (!poll) return;

            try {
                document.getElementById('poll-title').textContent = poll.title;
                document.getElementById('poll-description').textContent = poll.description;

                const [choicesData, voteStatusData] = await Promise.all([
                    fetch(`/api/polls/${pollId}/choices`).then(res => res.json()),
                    fetch(`/api/polls/vote-status/${pollId}`).then(res => res.json())
                ]);

                const pollChoicesContainer = document.getElementById('poll-choices');
                pollChoicesContainer.innerHTML = '';

                let percentages = {};
                let hasVoted = !!voteStatusData.choiceId;

                if (hasVoted) {
                    const allPercentages = await fetch(`/api/polls/${pollId}/percentages`).then(res => res.json());
                    allPercentages.forEach(item => {
                        percentages[item.choiceId] = item.percentage;
                    });
                }

                for (const choice of choicesData) {
                    const isUserChoice = voteStatusData.choiceId === choice.choiceId;
                    const choiceElement = document.createElement('div');
                    choiceElement.classList.add(
                        'poll-choice', 'p-6', 'bg-white', 'rounded-xl', 'shadow-sm',
                        'border', 'border-gray-100', 'hover:shadow-md', 'transition-all',
                        'duration-300', 'relative', 'overflow-hidden', 'animate-choice-entry',
                        'cursor-pointer', 'hover:bg-gray-50'
                    );

                    const percentage = hasVoted ? (percentages[choice.choiceId]?.toFixed(1) || '0.0') : '0.0';

                    choiceElement.innerHTML = `
                        <div class="flex items-center justify-between">
                            <h4 class="font-semibold text-gray-800 text-base">${choice.choice}</h4>
                            ${isUserChoice ? `
                                <span class="text-blue-600 text-sm">
                                    <i class="fas fa-check-circle mr-1"></i>Your Vote
                                </span>` : ''
                            }
                        </div>
                        <div class="percentage-bar mt-4 ${hasVoted ? 'block' : 'hidden'}">
                            <div class="flex items-center justify-between text-sm text-gray-600 mb-2">
                                <span>Vote Progress</span>
                                <span class="percentage-text">${percentage}%</span>
                            </div>
                            <div class="h-3 bg-gray-200 rounded-full overflow-hidden">
                                <div class="vote-bar h-full bg-gradient-to-r from-blue-500 to-blue-600 rounded-full"
                                     style="width: ${percentage}%"></div>
                            </div>
                        </div>
                    `;

                    // Handle vote click
                    choiceElement.addEventListener('click', async () => {
                        choiceElement.classList.add('active', 'scale-[0.98]');
                        setTimeout(() => choiceElement.classList.remove('scale-[0.98]'), 200);

                        const isChangingVote = voteStatusData.choiceId && voteStatusData.choiceId !== choice.choiceId;
                        const isSameVote = voteStatusData.choiceId === choice.choiceId;

                        if (isSameVote) {
                            showToast("You already voted for this choice.", 'green');
                            return;
                        }

                        if (isChangingVote) {
                            const modal = document.getElementById('changevotemodal');
                            const confirmBtn = modal.querySelector('.confirm-btn');
                            const cancelBtn = modal.querySelector('.cancel-btn');
                            const modalContent = modal.querySelector('div.rounded-2xl');

                            modal.classList.remove('hidden');
                            setTimeout(() => {
                                modalContent.classList.remove('scale-95', 'opacity-0');
                                modalContent.classList.add('scale-100', 'opacity-100');
                            }, 50);

                            const newConfirmBtn = confirmBtn.cloneNode(true);
                            const newCancelBtn = cancelBtn.cloneNode(true);
                            confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
                            cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);

                            newConfirmBtn.onclick = async () => {
                                newConfirmBtn.innerHTML = `
                                    <div class="flex items-center gap-2">
                                        <i class="fas fa-spinner fa-spin"></i> Updating...
                                    </div>
                                `;

                                try {
                                    const voteResponse = await fetch(`/api/polls/vote`, {
                                        method: 'PUT',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({ pollId: poll.pollId, choiceId: choice.choiceId })
                                    });

                                    if (!voteResponse.ok) throw new Error('Vote update failed');

                                    showToast("Vote Updated Successfully!", 'green');
                                    newConfirmBtn.innerHTML = "Yes, Change It";
                                    showPollDetail(poll.pollId);

                                    modalContent.classList.remove('scale-100', 'opacity-100');
                                    modalContent.classList.add('scale-95', 'opacity-0');
                                    setTimeout(() => modal.classList.add('hidden'), 300);
                                } catch (error) {
                                    console.error('Error:', error);
                                    showToast("Something went wrong. Please try again.", 'red');
                                    newConfirmBtn.innerHTML = "Yes, Change It";
                                }
                            };

                            newCancelBtn.onclick = () => {
                                modalContent.classList.remove('scale-100', 'opacity-100');
                                modalContent.classList.add('scale-95', 'opacity-0');
                                setTimeout(() => modal.classList.add('hidden'), 300);
                            };
                        } else {
                            // First-time vote
                            try {
                                const voteResponse = await fetch(`/api/polls/vote`, {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ pollId: poll.pollId, choiceId: choice.choiceId })
                                });

                                if (!voteResponse.ok) throw new Error('Vote failed');

                                const checkmark = document.createElement('div');
                                checkmark.className = 'absolute inset-0 flex items-center justify-center bg-blue-500 bg-opacity-10 animate-checkmark';
                                checkmark.innerHTML = `<i class="fas fa-check text-4xl text-blue-600"></i>`;
                                choiceElement.appendChild(checkmark);
                                setTimeout(() => checkmark.remove(), 1000);

                                setTimeout(() => showPollDetail(poll.pollId), 800);
                            } catch (error) {
                                console.error('Error voting:', error);
                                showToast("Failed to cast vote. Try again.", 'red');
                            }
                        }
                    });

                    // Animate progress bars after insertion
                    if (hasVoted) {
                        const voteBar = choiceElement.querySelector('.vote-bar');
                        const percentageText = choiceElement.querySelector('.percentage-text');

                        setTimeout(() => {
                            voteBar.style.width = `${percentage}%`;
                            percentageText.textContent = `${percentage}%`;

                            voteBar.style.animation = 'barShine 1.2s ease-out forwards';
                            voteBar.parentElement.style.animation = 'barBounce 0.6s ease-out';

                            setTimeout(() => {
                                voteBar.style.animation = '';
                                voteBar.parentElement.style.animation = '';
                                choiceElement.classList.add('voted');
                            }, 1200);
                        }, 200);
                    }

                    pollChoicesContainer.appendChild(choiceElement);
                }
            } catch (error) {
                console.error('Error loading poll details:', error);
            }
        }

        function showToast(message, color = 'green') {
            const toast = document.createElement('div');
            toast.className = `fixed top-4 right-4 bg-${color}-600 text-white px-6 py-3 rounded-lg flex items-center gap-2 shadow-lg transform translate-y-20 opacity-0 transition-all z-50`;
            toast.innerHTML = `<i class="fas fa-check-circle"></i> ${message}`;
            document.body.appendChild(toast);

            setTimeout(() => {
                toast.classList.remove('translate-y-20', 'opacity-0');
                setTimeout(() => {
                    toast.classList.add('translate-y-20', 'opacity-0');
                    setTimeout(() => toast.remove(), 500);
                }, 4000);
            }, 50);
        }


        // Modified backToPolls function with animation
        function backToPolls() {
            const list = document.getElementById('poll-question');
            const detailPanel = document.getElementById('poll-detail-panel');

            detailPanel.style.opacity = '0';
            detailPanel.style.transform = 'translateX(20px)';
            setTimeout(() => {
                detailPanel.classList.add('hidden');
                list.classList.remove('hidden');
                list.style.opacity = '0';
                list.style.transform = 'translateY(20px)';
                setTimeout(() => {
                    list.style.opacity = '1';
                    list.style.transform = 'translateY(0)';
                }, 50);
            }, 300);
            loadPolls();
        }

        document.addEventListener('DOMContentLoaded', () => {
            showPanel('announcements');
            initializeCalendar();
            selectDate(selectedDay);
            loadAnnouncements();
            loadPolls();
        });
    </script>

</div>