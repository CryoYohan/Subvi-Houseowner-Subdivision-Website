@model IEnumerable<ELNET1_GROUP_PROJECT.Models.User_Account>

@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Services";
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- SheetJS (xlsx) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <!-- jsPDF and AutoTable -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>
    <!-- docx library -->
    <script src="https://unpkg.com/docx@7.6.0/build/index.js"></script>
}


<div class="flex overflow-hidden">
    <!-- Sidebar -->
    <aside class="bg-white rounded-tr-2xl z-50 rounded-br-2xl shadow-md w-72 p-4 py-6">
        <h2 class="text-2xl font-bold text-blue-600 text-center mb-6">Admin Panel</h2>
        <nav class="flex-1 space-y-3">
            <a asp-controller="admin" asp-action="dashboard" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Dashboard" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-home w-6"></i>
                <span class="ml-3">Dashboard</span>
            </a>
            <a asp-controller="admin" asp-action="reservations" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Reservations" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-calendar-check w-6"></i>
                <span class="ml-3">Reservations</span>
            </a>
            <a asp-controller="admin" asp-action="homeownerstaffaccounts" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "HomeownerStaffAccounts" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-users w-6"></i>
                <span class="ml-3">Homeowners & Staff Accounts</span>
            </a>
            <a asp-controller="admin" asp-action="paymenthistory" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full0 transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "PaymentHistory" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-history w-6"></i>
                <span class="ml-3">Bill Payment History</span>
            </a>
            <a asp-controller="admin" asp-action="services" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Services" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-tools w-6"></i>
                <span class="ml-3">Services</span>
            </a>
            <a asp-controller="admin" asp-action="announcements" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Announcements" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-bullhorn w-6"></i>
                <span class="ml-3">Announcements</span>
            </a>
            <a asp-controller="admin" asp-action="poll" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Poll" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-poll w-6"></i>
                <span class="ml-3">Poll</span>
            </a>
            <a asp-controller="admin" asp-action="feedback" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Feedback" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-comment-alt w-6"></i>
                <span class="ml-3">Feedback</span>
            </a>
            <a asp-controller="admin" asp-action="reports" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Reports" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-chart-line w-6"></i>
                <span class="ml-3">Reports</span>
            </a>
        </nav>
    </aside>
    <div class="flex-1 p-3">
        <div class="bg-white shadow-md rounded-xl p-3 mb-3 flex items-center space-x-3">
            <span><i class="fas fa-chart-line text-blue-700 text-xl"></i></span>
            <h1 class="text-blue-700 font-bold text-lg">Reports</h1>
        </div>
        
        <ul class="nav nav-tabs" id="reportTabs" role="tablist">
            <li class="nav-item">
                <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#analyticsPanel" type="button">Analytics</button>
            </li>
            <li class="nav-item">
                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#generatePanel" type="button">Generate Report</button>
            </li>
        </ul>

        <div class="tab-content p-4 border rounded-bottom shadow-sm bg-white">
            <!-- ANALYTICS -->
            <div class="tab-pane fade show active" id="analyticsPanel">
                <h4 class="fw-bold text-primary mb-4">Analytics Dashboard</h4>
                <div class="row g-4">

                    <!-- Line Chart for Reservations Over Time -->
                    <div class="col-md-6">
                        <div class="card shadow-sm border-0 rounded-4">
                            <div class="card-body">
                                <h6 class="text-muted">Reservation Trends</h6>
                                <canvas id="reservationChart" height="100"></canvas>
                            </div>
                        </div>
                    </div>

                    <!-- Bar Chart for Payment Revenue -->
                    <div class="col-md-6">
                        <div class="card shadow-sm border-0 rounded-4">
                            <div class="card-body">
                                <h6 class="text-muted">Monthly Revenue</h6>
                                <canvas id="paymentChart" height="100"></canvas>
                            </div>
                        </div>
                    </div>

                    <!-- Pie Chart for Feedback Ratings -->
                    <div class="col-md-6">
                        <div class="card shadow-sm border-0 rounded-4">
                            <div class="card-body">
                                <h6 class="text-muted">Feedback Rating Distribution</h6>
                                <canvas id="feedbackChart" height="100"></canvas>
                            </div>
                        </div>
                    </div>

                    <!-- Doughnut Chart for Vehicle Type -->
                    <div class="col-md-6">
                        <div class="card shadow-sm border-0 rounded-4">
                            <div class="card-body">
                                <h6 class="text-muted">Vehicle Types Registered</h6>
                                <canvas id="vehicleChart" height="100"></canvas>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

            <!-- REPORT GENERATION -->
            <div class="tab-pane fade show active" id="generatePanel">
                <h4 class="mb-3">Generate Reports</h4>

                <!-- Report Filter Form -->
                <form id="reportForm">
                    <!-- Report Type -->
                    <div class="mb-3">
                        <label for="reportType" class="form-label">Report Type</label>
                        <select name="reportType" id="reportType" class="form-select" required>
                            <option value="RESERVATIONS" selected>Reservations</option>
                            <option value="SERVICE_REQUEST">Service Requests</option>
                            <option value="VEHICLE_REGISTRATION">Vehicle Registration</option>
                            <option value="VISITOR_PASSES">Visitor Passes</option>
                        </select>
                    </div>

                    <!-- Status filter tabs -->
                    <div id="statusTabsContainer" class="mb-3">
                        <ul class="nav nav-tabs" id="statusTabs">
                            <li class="nav-item">
                                <a class="nav-link active" data-status="Approved" href="#">Approved</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" data-status="Declined" href="#">Declined</a>
                            </li>
                        </ul>
                    </div>

                    <!-- Date Range Filter -->
                    <div class="mb-3" id="dateRangeGroup">
                        <label class="form-label">Date Range</label>
                        <div class="input-group">
                            <input type="date" name="startDate" id="startDate" class="form-control">
                            <span class="input-group-text">to</span>
                            <input type="date" name="endDate" id="endDate" class="form-control">
                        </div>
                    </div>

                    <!-- Vehicle Filters (Only visible when Vehicle Registration is selected) -->
                    <div id="vehicleFilters" class="mb-3" style="display: none;">
                        <div class="row">
                            <div class="col-md-6">
                                <label for="vehicleType" class="form-label">Vehicle Type</label>
                                <select id="vehicleType" class="form-select">
                                    <option value="">All</option>
                                    <option value="Car">Car</option>
                                    <option value="Motorcycle">Motorcycle</option>
                                    <option value="Truck">Truck</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="vehicleColor" class="form-label">Color</label>
                                <select id="vehicleColor" class="form-select">
                                    <option value="">All</option>
                                    <option value="Red">Red</option>
                                    <option value="Blue">Blue</option>
                                    <option value="Black">Black</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Report Format -->
                    <div class="mb-3">
                        <label for="reportFormat" class="form-label">Report Format</label>
                        <select name="format" id="reportFormat" class="form-select">
                            <option value="XLSX">Excel (XLSX)</option>
                            <option value="PDF">PDF</option>
                            <option value="DOCX">Word (DOCX)</option>
                        </select>
                    </div>

                    <!-- Generate Button -->
                    <button type="submit" class="btn btn-primary">Generate Report</button>
                </form>

                <!-- Data Display -->
                <div id="reportDataContainer" class="mt-4">
                    <table class="table table-bordered table-striped">
                        <thead id="reportTableHead"></thead>
                        <tbody id="reportTableBody"></tbody>
                    </table>
                </div>
            </div>
        </div>
</div>

    <script>
        window.onload = function() {
            // Reservation Trend Chart (Line chart)
            var reservationCtx = document.getElementById('reservationChart').getContext('2d');
            var reservationChart = new Chart(reservationCtx, {
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(ViewBag.ReservationMonths)), // Labels for the months (e.g. "2023-01")
                    datasets: [{
                        label: 'Reservations Trend',
                        data: @Html.Raw(Json.Serialize(ViewBag.ReservationCounts)), // Data for the reservations per month
                        borderColor: '#4e73df', // Line color
                        backgroundColor: 'rgba(78, 115, 223, 0.1)', // Background for the area under the line
                        fill: true,
                        tension: 0.4, // For smooth curves
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // Payment Trend Chart (Bar chart)
            var paymentCtx = document.getElementById('paymentChart').getContext('2d');
            var paymentChart = new Chart(paymentCtx, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(Json.Serialize(ViewBag.PaymentMonths)), // Labels for the months
                    datasets: [{
                        label: 'Payments Trend',
                        data: @Html.Raw(Json.Serialize(ViewBag.PaymentTotals)), // Data for the payment totals per month
                        backgroundColor: '#1cc88a', // Bar color
                        borderColor: '#1cc88a',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

               // Feedback Ratings Chart (Pie chart)
            var feedbackData = @Html.Raw(Json.Serialize(ViewBag.FeedbackRatings));
            var feedbackCtx = document.getElementById('feedbackChart').getContext('2d');
                var feedbackChart = new Chart(feedbackCtx, {
                    type: 'pie',
                    data: {
                        labels: feedbackData.map(f => f.rating), // Feedback ratings (e.g., 1, 2, 3, etc.)
                        datasets: [{
                            label: 'Feedback Ratings Breakdown',
                            data: feedbackData.map(f => f.count), // Count of each rating
                            backgroundColor: ['#ff5733', '#ffbd33', '#75ff33', '#33aaff', '#5733ff'], // Segment colors
                            borderColor: ['#ff5733', '#ffbd33', '#75ff33', '#33aaff', '#5733ff'], // Border colors
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true
                    }
                });

                // Vehicle Types Chart (Doughnut chart)
                var vehicleData = @Html.Raw(Json.Serialize(ViewBag.VehicleTypes));
                var vehicleCtx = document.getElementById('vehicleChart').getContext('2d');
                var vehicleChart = new Chart(vehicleCtx, {
                    type: 'doughnut',
                    data: {
                        labels: vehicleData.map(v => v.type), // Vehicle types (e.g., Sedan, SUV, etc.)
                        datasets: [{
                            label: 'Vehicle Types Breakdown',
                            data: vehicleData.map(v => v.count), // Count of each vehicle type
                            backgroundColor: ['#ff6f61', '#6a5acd', '#ff1493', '#20b2aa', '#f0e68c'], // Segment colors
                            borderColor: ['#ff6f61', '#6a5acd', '#ff1493', '#20b2aa', '#f0e68c'], // Border colors
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true
                    }
                });
        };

        // For Generating Report Part
        document.addEventListener("DOMContentLoaded", function () {
            // Initialize UI components
            document.getElementById("reportType").dispatchEvent(new Event("change"));

            // Tab switcher with error boundary
            document.querySelectorAll("#statusTabs a").forEach(tab => {
                tab.addEventListener("click", function (e) {
                    try {
                        e.preventDefault();
                        document.querySelectorAll("#statusTabs a").forEach(t => t.classList.remove("active"));
                        this.classList.add("active");
                    } catch (error) {
                        console.error("Tab switch error:", error);
                        alert("Error switching tabs");
                    }
                });
            });

            // Enhanced report type handler
            document.getElementById("reportType").addEventListener("change", function () {
                try {
                    const reportType = this.value;
                    const dateRangeGroup = document.getElementById("dateRangeGroup");
                    const vehicleFilters = document.getElementById("vehicleFilters");

                    dateRangeGroup.style.display = reportType === "VEHICLE_REGISTRATION" ? "none" : "block";
                    vehicleFilters.style.display = reportType === "VEHICLE_REGISTRATION" ? "block" : "none";
                } catch (error) {
                    console.error("Report type change error:", error);
                    alert("Error changing report type");
                }
            });

            // Robust form submission handler
            document.getElementById("reportForm").addEventListener("submit", async function (e) {
                e.preventDefault();
                const startTime = performance.now();

                try {
                    const reportType = document.getElementById("reportType").value;
                    const format = document.getElementById("reportFormat").value.toUpperCase();

                    if (!["XLSX", "PDF", "DOCX"].includes(format)) {
                        throw new Error("Invalid format selected");
                    }

                    await fetchReportData(async (data) => {
                        switch(format) {
                            case "XLSX":
                                await generateExcelReport(data, reportType);
                                break;
                            case "PDF":
                                await generatePdfReport(data, reportType);
                                break;
                            case "DOCX":
                                await generateDocxReport(data, reportType);
                                break;
                        }
                    });
                } catch (error) {
                    console.error("Report generation error:", error);
                    alert(`Report generation failed: ${error.message}`);
                } finally {
                    console.log(`Report generated in ${performance.now() - startTime}ms`);
                }
            });
        });

        async function fetchReportData(callback) {
            try {
                const reportType = document.getElementById("reportType").value;
                const statusTab = document.querySelector("#statusTabs a.active");
                const status = statusTab?.getAttribute("data-status") || 'active';

                const formData = new FormData();
                formData.append("reportType", reportType);
                formData.append("status", status);

                if (reportType === "VEHICLE_REGISTRATION") {
                    formData.append("vehicleType", document.getElementById("vehicleType").value);
                    formData.append("color", document.getElementById("vehicleColor").value);
                } else {
                    formData.append("startDate", document.getElementById("startDate").value);
                    formData.append("endDate", document.getElementById("endDate").value);
                }

                const response = await fetch('/Admin/GetReportData', {
                    method: "POST",
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                callback(data);
            } catch (error) {
                console.error("Data fetch error:", error);
                throw error;
            }
        }

        async function generateExcelReport(data, reportType) {
            return new Promise((resolve, reject) => {
                try {
                    const worksheet = XLSX.utils.json_to_sheet(data);
                    const workbook = XLSX.utils.book_new();
                    XLSX.utils.book_append_sheet(workbook, worksheet, "Report");
                    XLSX.writeFile(workbook, `${reportType}_report.xlsx`);
                    resolve();
                } catch (error) {
                    reject(error);
                }
            });
        }

        async function generatePdfReport(data, reportType) {
            return new Promise((resolve, reject) => {
                try {
                    const { jsPDF } = window.jspdf;
                    const doc = new jsPDF();

                    // PDF metadata
                    doc.setProperties({
                        title: `${reportType} Report`,
                        subject: 'Generated by Subvi System',
                        author: 'Subvi Reporting Service'
                    });

                    // Header
                    doc.setFontSize(16);
                    doc.setTextColor(40, 53, 147);
                    doc.text(`${reportType} Report`, 14, 20);

                    // Content
                    if (data?.length > 0) {
                        const headers = [Object.keys(data[0])];
                        const rows = data.map(record => Object.values(record));
                        doc.autoTable({
                            head: headers,
                            body: rows,
                            startY: 30,
                            theme: 'grid',
                            styles: { cellPadding: 2, fontSize: 10 },
                            headerStyles: { fillColor: [40, 53, 147], textColor: 255 }
                        });
                    } else {
                        doc.setTextColor(255, 0, 0);
                        doc.text("No records found", 14, 40);
                    }

                    // Footer
                    const pageCount = doc.getNumberOfPages();
                    for (let i = 1; i <= pageCount; i++) {
                        doc.setPage(i);
                        doc.setFontSize(10);
                        doc.text(`Page ${i} of ${pageCount}`, doc.internal.pageSize.width - 40, doc.internal.pageSize.height - 10);
                    }

                    doc.save(`${reportType}_report.pdf`);
                    resolve();
                } catch (error) {
                    reject(error);
                }
            });
        }

            async function generateDocxReport(data, reportType) {
            try {
                const { Document, Packer, Paragraph, Table, TableRow, TableCell, TextRun } = docx;

                const children = [];

                // Header
                children.push(
                    new Paragraph({
                        children: [
                            new TextRun({
                                text: `${reportType} Report`,
                                bold: true,
                                size: 32,
                                color: "2C3587"
                            })
                        ],
                        spacing: { after: 400 }
                    })
                );

                // Table or no data
                if (data?.length > 0) {
                    const keys = Object.keys(data[0]);

                    const table = new Table({
                        rows: [
                            // Table headers
                            new TableRow({
                                children: keys.map(key =>
                                    new TableCell({
                                        children: [new Paragraph({
                                            children: [new TextRun({ text: key, bold: true })]
                                        })]
                                    })
                                )
                            }),
                            // Table rows
                            ...data.map(record =>
                                new TableRow({
                                    children: keys.map(key =>
                                        new TableCell({
                                            children: [new Paragraph(record[key]?.toString() || "-")]
                                        })
                                    )
                                })
                            )
                        ],
                        width: { size: 100, type: "pct" },
                        borders: {
                            top: { style: "single", size: 8, color: "2C3587" },
                            bottom: { style: "single", size: 8, color: "2C3587" }
                        }
                    });

                    children.push(table);
                } else {
                    children.push(
                        new Paragraph({
                            text: "No records found",
                            color: "FF0000",
                            italics: true
                        })
                    );
                }

                // ✅ One and only section here
                const doc = new Document({
                    creator: "Subvi Reporting Service",
                    title: `${reportType} Report`,
                    description: "Generated by Subvi System",
                    sections: [
                        {
                            children
                        }
                    ]
                });

                // Generate and download
                const blob = await Packer.toBlob(doc);
                const url = URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = url;
                a.download = `${reportType}_report.docx`;
                document.body.appendChild(a);
                a.click();

                setTimeout(() => {
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                }, 100);
            } catch (error) {
                console.error("DOCX Generation Error:", error);
                throw error;
            }
        }
    </script>
