@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Lot Management";
}

@section Scripts {
    <script src="~/js/notification-admin.js"></script>
}

<div class="flex overflow-hidden">
    <!-- Sidebar -->
    <aside class="bg-white rounded-tr-2xl z-50 rounded-br-2xl shadow-md w-72 p-4 py-6">
        <h2 class="text-2xl font-bold text-blue-600 text-center mb-6">Admin Panel</h2>
        <nav class="flex-1 space-y-3">
            <a asp-controller="admin" asp-action="dashboard" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Dashboard" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-home w-6"></i>
                <span class="ml-3">Dashboard</span>
            </a>
            <a asp-controller="admin" asp-action="reservations" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Reservations" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-calendar-check w-6"></i>
                <span class="ml-3">Reservations</span>
            </a>
            <a asp-controller="admin" asp-action="homeownerstaffaccounts" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "HomeownerStaffAccounts" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-users w-6"></i>
                <span class="ml-3">Homeowners & Staff Accounts</span>
            </a>
            <a asp-controller="admin" asp-action="paymenthistory" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full0 transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "PaymentHistory" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-history w-6"></i>
                <span class="ml-3">Bill Payment History</span>
            </a>
            <a asp-controller="admin" asp-action="services" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Services" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-tools w-6"></i>
                <span class="ml-3">Services</span>
            </a>
            <a asp-controller="admin" asp-action="announcements" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Announcements" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-bullhorn w-6"></i>
                <span class="ml-3">Announcements</span>
            </a>
            <a asp-controller="admin" asp-action="poll" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Poll" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-poll w-6"></i>
                <span class="ml-3">Poll</span>
            </a>
            <a asp-controller="admin" asp-action="feedback" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Feedback" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-comment-alt w-6"></i>
                <span class="ml-3">Feedback</span>
            </a>
            <a asp-controller="admin" asp-action="reports" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Reports" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-chart-line w-6"></i>
                <span class="ml-3">Reports</span>
            </a>
        </nav>
    </aside>
    <div class="flex-1 p-3">
        <div class="bg-white p-3 dark:bg-gray-900 rounded-lg shadow-md">
            <div class="flex items-center mx-auto text-lg space-x-2 mb-4 w-full bg-white text-[#1E3A8A] p-3 rounded-xl shadow-md relative group">
                <h1 class="text-2xl font-bold mb-2 text-blue-900"><i class="fas fa-poll w-6"></i> Lot Management</h1>
            </div>

            <div class="p-4">
                <!-- Header with Add button and tabs -->
                <div class="flex justify-between items-center mb-4">
                    <button class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600" onclick="openAddLotModal()">Add Lot</button>

                    <div class="flex space-x-2">
                        <button id="tabAvailable" class="tab-btn bg-blue-500 text-white px-4 py-2 rounded-md" onclick="selectTab('Available')">Available</button>
                        <button id="tabSold" class="tab-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-md" onclick="selectTab('Sold')">Sold</button>
                    </div>
                </div>

                <!-- Search input -->
                <input type="text" id="searchInput" oninput="filterLots()" placeholder="Search lots..."
                       class="w-full px-3 py-2 border rounded-md mb-4 focus:outline-none focus:ring-2 focus:ring-blue-400" />

                <!-- Lot Cards Container -->
                <div id="lotContainer" class="grid gap-2 grid-cols-1 md:grid-cols-2 lg:grid-cols-3 overflow-y-auto p-2" style="max-height: 430px"></div>
            </div>

            <!-- Lot Modal -->
            <div id="lotModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
                <div class="bg-white w-full max-w-xl rounded-lg shadow-lg p-6 relative">
                    <h2 id="modalTitle" class="text-xl font-semibold mb-4">Add Lot</h2>

                    <!-- Hidden Lot ID for editing -->
                    <input type="hidden" id="lotId" />

                    <!-- Block Number -->
                    <div class="mb-4">
                        <label class="font-medium">Block Number</label>
                        <input id="blockNumber" type="text"
                               class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400;" />
                        <p id="blockNumberError" class="text-red-500 text-sm mt-1"></p>
                    </div>

                    <!-- Lot Number -->
                    <div class="mb-4">
                        <label class="font-medium">Lot Number</label>
                        <input id="lotNumber" type="text"
                               class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400;" />
                        <p id="lotNumberError" class="text-red-500 text-sm mt-1"></p>
                    </div>

                    <!-- Size SQM -->
                    <div class="mb-4">
                        <label class="font-medium">Size (sqm)</label>
                        <input id="sizeSqm" type="number" min="0"
                               class="input-field" />
                        <p id="sizeSqmError" class="text-red-500 text-sm mt-1"></p>
                    </div>

                    <!-- Price -->
                    <div class="mb-4">
                        <label class="font-medium">Price</label>
                        <input id="price" type="number" min="0"
                               class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400;" />
                        <p id="priceError" class="text-red-500 text-sm mt-1"></p>
                    </div>

                    <!-- Description -->
                    <div class="mb-4">
                        <label class="font-medium">Description</label>
                        <textarea id="description" rows="3" maxlength="150"
                                  class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400 resize-none"
                                  oninput="updateDescriptionCount()"></textarea>
                        <div class="flex justify-between text-sm mt-1">
                            <p id="descriptionError" class="text-red-500 text-sm mt-1"></p>
                            <p id="descriptionCount" class="text-sm text-gray-500 text-right">150 characters left</p>
                        </div>
                    </div>

                    <!-- Buttons -->
                    <div class="flex justify-end space-x-2">
                        <button class="bg-gray-300 text-gray-800 px-4 py-2 rounded hover:bg-gray-400" onclick="closeLotModal()">Cancel</button>
                        <button id="saveBtn" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 flex items-center space-x-2"
                                onclick="handleSaveClick()">
                            <span>Save</span>
                            <svg id="loadingSpinner" class="w-4 h-4 animate-spin hidden" xmlns="http://www.w3.org/2000/svg" fill="none"
                                 viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor"
                                        stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor"
                                      d="M4 12a8 8 0 018-8v4l3-3-3-3v4a8 8 0 00-8 8z"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let selectedTab = 'Available';
    let lots = []; // Will be populated from the backend

    // Fetch the lots from the backend on page load
    async function loadLots() {
        try {
            const response = await fetch(`/admin/getlots?status=${selectedTab}`);
            if (response.ok) {
                lots = await response.json();
                filterLots(); // Call filter to render the filtered list
            } else {
                console.error('Error fetching lots data');
            }
        } catch (error) {
            console.error('Error fetching lots:', error);
        }
    }

    function selectTab(tab) {
        selectedTab = tab;

        const availableBtn = document.getElementById('tabAvailable');
        const soldBtn = document.getElementById('tabSold');

        if (tab === 'Available') {
            availableBtn.classList.add('bg-blue-500', 'text-white');
            availableBtn.classList.remove('bg-gray-200', 'text-gray-700');

            soldBtn.classList.remove('bg-blue-500', 'text-white');
            soldBtn.classList.add('bg-gray-200', 'text-gray-700');
        } else {
            soldBtn.classList.add('bg-blue-500', 'text-white');
            soldBtn.classList.remove('bg-gray-200', 'text-gray-700');

            availableBtn.classList.remove('bg-blue-500', 'text-white');
            availableBtn.classList.add('bg-gray-200', 'text-gray-700');
        }

        loadLots();
        filterLots();
    }

    function filterLots() {
        const search = document.getElementById("searchInput").value.toLowerCase();
        const filtered = lots.filter(lot => {
            const lotText = `${lot.blockNumber} ${lot.lotNumber} ${lot.homeownerName || ''}`.toLowerCase();
            const combinedText = `block ${lot.blockNumber} lot ${lot.lotNumber} ${lot.homeownerName || ''}`.toLowerCase();
            return lot.status === selectedTab && (
                lotText.includes(search) || combinedText.includes(search)
            );
        });

        renderLots(filtered);
    }

     function renderLots(data) {
        const container = document.getElementById("lotContainer");
        container.innerHTML = "";

        if (data.length === 0) {
            container.innerHTML = `<p class="text-center text-gray-500 text-sm">No lots data found.</p>`;
            return;
        }

        data.forEach(lot => {
            console.log(lot);
            container.innerHTML += `
            <div class="bg-white shadow rounded-lg p-4 relative">
                <h4 class="font-bold text-blue-600 mb-1">Block ${lot.blockNumber}, Lot ${lot.lotNumber}</h4>
                <p><strong>Size:</strong> ${lot.sizeSqm} sqm</p>
                <p><strong>Price:</strong> ₱${lot.price}</p>
                <p><strong>Status:</strong> ${lot.status}</p>
                <p><strong>Description:</strong> ${lot.description || '-'}</p>
                ${lot.status === "Sold" ? `<p><strong>Homeowner:</strong> ${lot.homeownerName}</p>` : ""}
                <div class="mt-3 flex justify-end space-x-2">
                    <button class="bg-green-500 text-white px-3 py-1 rounded" onclick="openLotEditModal(${lot.lotId})">Edit</button>
                    ${lot.status === "Available" ? `
                    <button class="bg-red-500 text-white px-3 py-1 rounded" onclick="confirmLotDelete(${lot.lotId})">Delete</button>` : ""}
                </div>
                <p><strong>Date Created:</strong> ${lot.createdAt || 'No Date'}</p>
            </div>`;
        });
    }

    function openAddLotModal() {
        document.getElementById("modalTitle").innerText = "Add Lot";
        document.getElementById("lotId").value = "";
        ["blockNumber", "lotNumber", "sizeSqm", "price", "description"].forEach(id => {
            document.getElementById(id).value = "";
            document.getElementById(id).disabled = false;
        });
        document.getElementById("lotModal").classList.remove("hidden");
    }

    function openLotEditModal(lotId) {
        const lot = lots.find(l => l.lotId === lotId);
        if (!lot) return;

        document.getElementById("modalTitle").innerText = "Edit Lot";
        document.getElementById("lotId").value = lot.lotId;
        document.getElementById("blockNumber").value = lot.blockNumber;
        document.getElementById("lotNumber").value = lot.lotNumber;
        document.getElementById("blockNumber").disabled = true;
        document.getElementById("lotNumber").disabled = true;
        document.getElementById("sizeSqm").value = lot.sizeSqm;
        document.getElementById("price").value = lot.price;
        document.getElementById("description").value = lot.description;
        document.getElementById("lotModal").classList.remove("hidden");
        updateDescriptionCount();
    }

    function closeLotModal() {
        document.getElementById("lotModal").classList.add("hidden");

        // Clear all inputs and errors
        const fields = ['lotId', 'blockNumber', 'lotNumber', 'sizeSqm', 'price', 'description'];
        fields.forEach(id => document.getElementById(id).value = "");

        const errorFields = ['blockNumberError', 'lotNumberError', 'sizeSqmError', 'priceError', 'descriptionError'];
        errorFields.forEach(id => document.getElementById(id).textContent = "");

        document.getElementById("descriptionCount").textContent = "150 characters left";
    }

    function handleSaveClick() {
        const lotId = document.getElementById("lotId").value;
        const isEdit = lotId !== "";
        saveLot(isEdit, lotId);
    }

    function updateDescriptionCount() {
        const description = document.getElementById("description");
        const count = description.value.length;
        const max = 150;

        const counter = document.getElementById("descriptionCount");
        counter.textContent = `${max - count} characters left`;

        if (count > max) {
            document.getElementById("descriptionError").textContent = "Description must be 150 characters or less.";
        } else {
            document.getElementById("descriptionError").textContent = "";
        }
    }

    document.getElementById("description").addEventListener("input", updateDescriptionCount);

    async function saveLot(isEdit = false, lotId = null) {
        const fields = ['blockNumber', 'lotNumber', 'sizeSqm', 'price'];
        let hasError = false;

        fields.forEach(field => {
            const input = document.getElementById(field);
            if (!input.value.trim()) {
                document.getElementById(`${field}Error`).textContent = "This field is required.";
                hasError = true;
            } else {
                document.getElementById(`${field}Error`).textContent = "";
            }
        });

        const desc = document.getElementById("description").value;
        if (desc.length > 150) {
            document.getElementById("descriptionError").textContent = "Description must be 150 characters or less.";
            hasError = true;
        }

        if (hasError) return;

        const confirmText = isEdit
            ? "Are you sure you want to update the lot information? Updating information could affect where the homeowner lives."
            : "Are you sure all lot information are correct?";

        const confirmResult = await Swal.fire({
            title: isEdit ? "Update Lot" : "Add Lot",
            text: confirmText,
            icon: "question",
            showCancelButton: true,
            confirmButtonText: "Yes",
            cancelButtonText: "Cancel"
        });

        if (confirmResult.isConfirmed) {
            document.getElementById("saveBtn").disabled = true;
            document.getElementById("loadingSpinner").classList.remove("hidden");

            const isEdit = !!document.getElementById("lotId")?.value;
            const data = {
                blockNumber: document.getElementById("blockNumber").value,
                lotNumber: document.getElementById("lotNumber").value,
                sizeSqm: parseFloat(document.getElementById("sizeSqm").value),
                price: parseFloat(document.getElementById("price").value),
                description: desc
            };

            if (isEdit) {
                data.lotId = parseInt(document.getElementById("lotId").value);
            }

            const url = isEdit ? `/admin/editlot` : "/admin/addlot";

            try {
                const response = await fetch(url, {
                    method: isEdit ? "PUT" : "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(data)
                });

                document.getElementById("saveBtn").disabled = false;
                document.getElementById("loadingSpinner").classList.add("hidden");

                if (response.ok) {
                    Swal.fire("Success", `Lot ${isEdit ? "updated" : "added"} successfully!`, "success")
                        .then(() => location.reload());
                } else {
                    const errorData = await response.json();
                    Swal.fire("Error", errorData.message || "Something went wrong.", "error");
                    console.error("Developer Error:", errorData.devMessage || errorData.message);
                }
            } catch (error) {
                console.error("Unexpected error:", error);
                Swal.fire("Error", "A network or unexpected error occurred.", "error");
            }
        }
    }

    function confirmLotDelete(lotId) {
        Swal.fire({
            title: "Delete Lot",
            text: "Are you sure you want to delete this Lot?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, Delete",
            cancelButtonText: "Cancel"
        }).then(async result => {
            if (result.isConfirmed) {
                const response = await fetch(`/admin/deletelot?lotId=${lotId}`, { method: "DELETE" });
                if (response.ok) {
                    Swal.fire("Deleted", "Lot has been deleted.", "success").then(() => location.reload());
                } else {
                    Swal.fire("Error", await response.text(), "error");
                }
            }
        });
    }

    // Call loadLots when the page loads to fetch and display the data
    loadLots();
</script>
