@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Event Schedules";
}

@section Scripts {
    <script src="~/js/notification-admin.js"></script>
}

<div class="flex overflow-hidden">
    <!-- Sidebar -->
    <aside class="bg-white rounded-tr-2xl z-50 rounded-br-2xl shadow-md w-72 p-4 py-6">
        <h2 class="text-2xl font-bold text-blue-600 text-center mb-6">Admin Panel</h2>
        <nav class="flex-1 space-y-3">
            <a asp-controller="admin" asp-action="dashboard" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Dashboard" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-home w-6"></i>
                <span class="ml-3">Dashboard</span>
            </a>
            <a asp-controller="admin" asp-action="reservations" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Reservations" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-calendar-check w-6"></i>
                <span class="ml-3">Reservations</span>
            </a>
            <a asp-controller="admin" asp-action="homeownerstaffaccounts" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "HomeownerStaffAccounts" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-users w-6"></i>
                <span class="ml-3">Homeowners & Staff Accounts</span>
            </a>
            <a asp-controller="admin" asp-action="paymenthistory" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full0 transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "PaymentHistory" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-history w-6"></i>
                <span class="ml-3">Bill Payment History</span>
            </a>
            <a asp-controller="admin" asp-action="services" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Services" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-tools w-6"></i>
                <span class="ml-3">Services</span>
            </a>
            <a asp-controller="admin" asp-action="announcements" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Announcements" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-bullhorn w-6"></i>
                <span class="ml-3">Announcements</span>
            </a>
            <a asp-controller="admin" asp-action="poll" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Poll" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-poll w-6"></i>
                <span class="ml-3">Poll</span>
            </a>
            <a asp-controller="admin" asp-action="feedback" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Feedback" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-comment-alt w-6"></i>
                <span class="ml-3">Feedback</span>
            </a>
            <a asp-controller="admin" asp-action="reports" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Reports" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-chart-line w-6"></i>
                <span class="ml-3">Reports</span>
            </a>
        </nav>
    </aside>

    <div class="flex-1 p-3">
         <div class="flex items-center mx-auto text-lg space-x-2 mb-4 w-full bg-white text-[#1E3A8A] p-3 rounded-xl shadow-md relative group">
            <h1 class="text-2xl font-bold mb-2 text-blue-900"><i class="fas fa-calendar-check w-6"></i> Event</h1>
         </div>

        <div class="flex space-x-4 bg-white">
            <!-- Schedule List -->
            <div class="bg-white shadow-md rounded-lg w-1/4 p-4">
                <h2 class="text-lg font-semibold text-blue-800">Schedules</h2>
                <ul id="schedule-list" class="mt-2 space-y-2"><!-- This is where the list of schedule list will show (do not remove guys) --></ul>
            </div>

            <!-- Calendar -->
            <div class="bg-white shadow-md rounded-lg flex-1 p-6">
                <div class="flex justify-between">
                    <button id="prev-month" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <h1 id="current-month" class="text-xl font-semibold text-blue-800"></h1>
                    <button id="next-month" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>

                <div class="grid grid-cols-7 gap-4 bg-white mt-4 text-center">
                    <div class="font-semibold text-blue-800">Sun</div>
                    <div class="font-semibold text-blue-800">Mon</div>
                    <div class="font-semibold text-blue-800">Tue</div>
                    <div class="font-semibold text-blue-800">Wed</div>
                    <div class="font-semibold text-blue-800">Thu</div>
                    <div class="font-semibold text-blue-800">Fri</div>
                    <div class="font-semibold text-blue-800">Sat</div>
                </div>
                <div id="calendar-days" class="mt-2"></div>
            </div>
        </div>
    </div>
</div>

<script>
    let currentDate = new Date();
    let scheduleData = {};
    let selectedDate;
    const scheduleList = document.getElementById("schedule-list");
    const calendarDays = document.getElementById("calendar-days");
    const currentMonthText = document.getElementById("current-month");

    async function fetchScheduleData() {
        try {
            const response = await fetch("/api/calendar/admin/schedules");
            const Data = await response.json();
            scheduleData = Data;
            showSchedule(selectedDate)
            renderCalendar();
        } catch (error) {
            console.error("Failed to fetch schedule data:", error);
        }
    }

    fetchScheduleData();

    function renderCalendar() {
        calendarDays.innerHTML = "";
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();
        const firstDay = new Date(year, month, 1).getDay();
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const today = new Date();

        const todayStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
        if (!selectedDate) selectedDate = todayStr;

        currentMonthText.textContent = currentDate.toLocaleString('default', {
            month: 'long',
            year: 'numeric'
        });

        // Create a grid container
        const gridContainer = document.createElement('div');
        gridContainer.className = "grid grid-cols-7 grid-rows-6 gap-2";

        // Add empty cells before the first day
        for (let i = 0; i < firstDay; i++) {
            const emptyCell = document.createElement('div');
            emptyCell.className = "h-22 min-w-24 p-2 opacity-0";
            gridContainer.appendChild(emptyCell);
        }

        // Add days
        for (let day = 1; day <= daysInMonth; day++) {
            const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
            const schedule = scheduleData[dateStr] || { events: [], reservations: 0, reservationDateTime: [] };
            const isToday = dateStr === todayStr;
            const isSelected = dateStr === selectedDate;

            // Create day cell
            const dayCell = document.createElement('div');
            dayCell.className = `h-22 min-w-24 p-2 border rounded-lg relative cursor-pointer transition-colors
                ${isSelected ? 'calendar-selected-bg' : 'hover:bg-blue-200'}`;
            dayCell.onclick = () => showSchedule(dateStr);

            // Date number
            const dateSpan = document.createElement('span');
            dateSpan.className = "font-medium relative z-10";
            dateSpan.innerHTML = isToday
                ? `<span class="bg-blue-800 text-white rounded-full w-6 h-6 flex items-center justify-center">${day}</span>`
                : day;

            // Event dot indicator it shows if there are events or reservations
            const eventIndicator = document.createElement('span');
            eventIndicator.className = "w-2 h-2 bg-blue-400 rounded-full";
            eventIndicator.style.visibility = (schedule.events.length > 0 || schedule.reservations > 0) ? "visible" : "hidden";

            // Append top section for date & indicator
            const topSection = document.createElement('div');
            topSection.className = "flex justify-between items-start";
            topSection.appendChild(dateSpan);
            topSection.appendChild(eventIndicator);
            dayCell.appendChild(topSection);

            // Display Events
            const eventsDiv = document.createElement('div');
            eventsDiv.className = "mt-1 text-left text-sm truncate";

            if (schedule.events.length > 0) {
                const visibleEvents = schedule.events.slice(0, 1);
                eventsDiv.innerHTML = visibleEvents
                    .map(event => `<div class="text-blue-900"><strong>• ${event.description}</strong></div>`)
                    .join('');

                if (schedule.events.length > 2) {
                    const extraCount = schedule.events.length - 2;
                    eventsDiv.innerHTML += `<div class="text-gray-500 italic">+${extraCount} more</div>`;
                }
            } else {
                eventsDiv.innerHTML = "&nbsp;";
            }

            dayCell.appendChild(eventsDiv);

            // Display Reservations
            const reservationsDiv = document.createElement('div');
            reservationsDiv.className = "mt-1 text-left text-sm truncate text-blue-700";
            if (schedule.reservations > 0) {
                reservationsDiv.innerHTML = `<div>📌<strong>Reserve: </strong> ${schedule.reservations} </div>`;
            } else {
                reservationsDiv.innerHTML = "&nbsp;";
            }
            dayCell.appendChild(reservationsDiv);

            gridContainer.appendChild(dayCell);
        }

        // Fill remaining cells
        const totalCells = firstDay + daysInMonth;
        const remainingCells = totalCells % 7 === 0 ? 0 : 7 - (totalCells % 7);
        for (let i = 0; i < remainingCells; i++) {
            const emptyCell = document.createElement('div');
            emptyCell.className = "h-22 min-w-24 p-2 opacity-0";
            gridContainer.appendChild(emptyCell);
        }

        // Append the grid container to the calendar
        calendarDays.appendChild(gridContainer);
    }

    function showSchedule(date) {
        selectedDate = date;
        scheduleList.innerHTML = "";
        const data = scheduleData[date] || { events: [], reservationDateTime: [] };
        const hasEvents = data.events.length > 0;
        const hasReservations = data.reservationDateTime.length > 0;

        let content = "";

        if (data.events.length === 0 && data.reservationDateTime.length === 0) {
            content = `<div class="p-3 text-gray-600 bg-gray-100 rounded-lg text-center">No Event & Reservation.</div>`;
        } else {
            content = `
                <div class="text-center font-bold calendar-event-text-title-color">📅 EVENTS</div>

                <!-- Events Section -->
                <div class="p-1 overflow-y-auto custom-scrollbar p-2 space-y-2" style="max-height: 190px">
                    ${data.events.length > 0 ? `
                        ${data.events.map(event => `
                            <div class="calendar-event-list-bg rounded-lg shadow-md p-2">
                                <li class="calendar-event-text-list-color font-semibold">• ${event.description}</li>
                            </div>
                        `).join('')}
                    ` : `<div class="text-gray-600 text-center p-2">No Event</div>`}
                </div>

                <div class="border-t my-3"></div>

                <div class="text-center font-bold calendar-reservation-text-title-color">
                    ⏰ RESERVATIONS: ${data.reservationDateTime.length || "0"}
                </div>

                <!-- Reservations Section -->
                <div class="p-1 overflow-y-auto custom-scrollbar p-2 space-y-2" style="max-height: 190px">
                    ${data.reservationDateTime.length > 0 ? `
                        ${data.reservationDateTime.map(timeRange => `
                            <div class="calendar-reservation-list-bg rounded-lg shadow-md p-2 mb-2">
                                <li class="calendar-reservation-text-list-color font-semibold">🕒 ${timeRange}</li>
                            </div>
                        `).join('')}
                    ` : `<div class="text-center p-2">No Reservation</div>`}
                </div>
            `;
        }

        scheduleList.innerHTML = content;
        renderCalendar();
    }

    selectedDate = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(currentDate.getDate()).padStart(2, '0')}`;
    showSchedule(selectedDate);

    document.getElementById("prev-month").addEventListener("click", () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        renderCalendar();
    });

    document.getElementById("next-month").addEventListener("click", () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        renderCalendar();
    });

    renderCalendar();
</script>
