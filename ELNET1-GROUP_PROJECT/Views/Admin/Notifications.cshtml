@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Notifications";
}

<div class="flex flex-row overflow-hidden pt-4 flex-shrink-0">
    <!-- Sidebar -->
    <aside class="bg-white rounded-tr-2xl z-50 rounded-br-2xl shadow-md w-72 p-4 py-6">
        <h2 class="text-2xl font-bold text-blue-600 text-center mb-6">Admin Panel</h2>
        <nav class="flex-1 space-y-3">
            <a asp-controller="admin" asp-action="dashboard" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Dashboard" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-home w-6"></i>
                <span class="ml-3">Dashboard</span>
            </a>
            <a asp-controller="admin" asp-action="reservations" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Reservations" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-calendar-check w-6"></i>
                <span class="ml-3">Reservations</span>
            </a>
            <a asp-controller="admin" asp-action="homeownerstaffaccounts" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "HomeownerStaffAccounts" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-users w-6"></i>
                <span class="ml-3">Homeowners & Staff Accounts</span>
            </a>
            <a asp-controller="admin" asp-action="paymenthistory" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full0 transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "PaymentHistory" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-history w-6"></i>
                <span class="ml-3">Bill Payment History</span>
            </a>
            <a asp-controller="admin" asp-action="services" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Services" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-tools w-6"></i>
                <span class="ml-3">Services</span>
            </a>
            <a asp-controller="admin" asp-action="announcements" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Announcements" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-bullhorn w-6"></i>
                <span class="ml-3">Announcements</span>
            </a>
            <a asp-controller="admin" asp-action="poll" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Poll" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-poll w-6"></i>
                <span class="ml-3">Poll</span>
            </a>
            <a asp-controller="admin" asp-action="feedback" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Feedback" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-comment-alt w-6"></i>
                <span class="ml-3">Feedback</span>
            </a>
            <a asp-controller="admin" asp-action="reports" style="text-decoration: none;"
               class="flex items-center space-x-4 p-3 hover:bg-gray-100 sidebar-item rounded-l-full transition no-underline @(ViewContext.RouteData.Values["Action"].ToString() == "Reports" ? "active-item" : "transition ease-in-out")">
                <i class="fas fa-chart-line w-6"></i>
                <span class="ml-3">Reports</span>
            </a>
        </nav>
    </aside>

    <!-- Main Content -->
    <div class="flex-1 p-3 overflow-y-auto w-full fade-in">
        <div class="flex-1overflow-y-auto">
            <!-- Header -->
            <div class="p-6 rounded-2xl shadow-md w-full mx-auto">
                <!-- Header -->
                <div class="mb-8">
                    <h1 class="text-3xl font-bold text-blue-900 mb-2"><i class="bi bi-bell-fill fs-5"></i> Notifications</h1>
                    <p class="text-blue-500 font-medium">View Community Forum Updates.</p>
                </div>

                <!-- Tabs -->
                <div class="flex flex-wrap gap-2 mb-6 border-b border-gray-200 items-center justify-center">
                    <button data-type="Post Creation"
                            class="px-4 py-2 rounded-t-lg flex items-center font-medium space-x-2 transition-colors notif-tab active-tab
                       bg-white border-b-4 border-blue-500 text-blue-600 hover:bg-blue-50">
                        <i class="fas fa-pencil-alt text-blue-500 text-lg"></i>
                        <span>Post Creation</span>
                        <span class="count-badge bg-blue-100 text-blue-600 px-2 py-1 rounded-full text-xs" id="creation-count"></span>
                    </button>
                    <button data-type="Post Like"
                            class="px-4 py-2 rounded-t-lg flex font-medium items-center space-x-2 transition-colors notif-tab
                       hover:bg-blue-50 text-gray-600 border-b-4 border-transparent">
                        <i class="fas fa-thumbs-up text-green-500 text-lg"></i>
                        <span>Post Likes</span>
                        <span class="count-badge bg-blue-100 text-blue-600 px-2 py-1 rounded-full text-xs" id="like-count"></span>
                    </button>
                    <button data-type="Post Reply"
                            class="px-4 py-2 rounded-t-lg flex font-medium items-center space-x-2 transition-colors notif-tab
                       hover:bg-blue-50 text-gray-600 border-b-4 border-transparent">
                        <i class="fas fa-comment text-blue-500 text-lg"></i>
                        <span>Post Reply</span>
                        <span class="count-badge bg-blue-100 text-blue-600 px-2 py-1 rounded-full text-xs" id="reply-count"></span>
                    </button>
                    <button data-type="Announcement"
                            class="px-4 py-2 rounded-t-lg flex font-medium items-center space-x-2 transition-colors notif-tab
                       hover:bg-blue-50 text-gray-600 border-b-4 border-transparent">
                        <i class="fas fa-bullhorn text-green-500 text-lg"></i>
                        <span>Announcement</span>
                        <span class="count-badge bg-blue-100 text-blue-600 px-2 py-1 rounded-full text-xs" id="announcement-count"></span>
                    </button>
                    <button data-type="Event"
                            class="px-4 py-2 rounded-t-lg flex font-medium items-center space-x-2 transition-colors notif-tab
                       hover:bg-blue-50 text-gray-600 border-b-4 border-transparent">
                        <i class="fas fa-calendar-alt text-blue-500 text-lg"></i>
                        <span>Event</span>
                        <span class="count-badge bg-blue-100 text-blue-600 px-2 py-1 rounded-full text-xs" id="event-count"></span>
                    </button>
                    <button data-type="Poll"
                            class="px-4 py-2 rounded-t-lg flex font-medium items-center space-x-2 transition-colors notif-tab
                       hover:bg-blue-50 text-gray-600 border-b-4 border-transparent">
                        <i class="fas fa-poll text-green-500 text-lg"></i>
                        <span>Poll</span>
                        <span class="count-badge bg-blue-100 text-blue-600 px-2 py-1 rounded-full text-xs" id="poll-count"></span>
                    </button>
                    <button data-type="Facility"
                            class="px-4 py-2 rounded-t-lg flex font-medium items-center space-x-2 transition-colors notif-tab
                       hover:bg-blue-50 text-gray-600 border-b-4 border-transparent">
                        <i class="fas fa-user text-blue-500 text-lg"></i>
                        <span>Facility</span>
                        <span class="count-badge bg-blue-100 text-blue-600 px-2 py-1 rounded-full text-xs" id="facility-count"></span>
                    </button>
                    <button data-type="Account"
                            class="px-4 py-2 rounded-t-lg flex font-medium items-center space-x-2 transition-colors notif-tab
                       hover:bg-blue-50 text-gray-600 border-b-4 border-transparent">
                        <i class="fas fa-user text-green-500 text-lg"></i>
                        <span>Account</span>
                        <span class="count-badge bg-blue-100 text-blue-600 px-2 py-1 rounded-full text-xs" id="account-count"></span>
                    </button>
                </div>

                <!-- Action Bar -->
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
                    <div class="flex-1 relative max-w-md w-full">
                        <div class="flex items-center relative">
                            <input type="text"
                                   id="searchInput"
                                   placeholder="Search notifications..."
                                   style="display: none;"
                                   class="w-full pl-12 pr-4 py-2 rounded-lg border border-gray-200 focus:border-blue-500
                  focus:ring-2 focus:ring-blue-200 absolute right-0 bg-white z-0" />

                            <button id="toggleSearch"
                                    class="p-2 text-gray-500 hover:text-blue-600 transition-colors z-10 absolute">
                                <i id="searchIcon" class="fas fa-search text-lg"></i>
                                <i id="closeIcon" class="fas fa-times text-lg" style="display: none;"></i>
                            </button>
                        </div>
                    </div>
                    <button id="markAllAsRead"
                            class="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2.5
                   rounded-lg transition-colors shadow-sm hidden">
                        <i class="fas fa-check-double"></i>
                        <span>Mark All as Read</span>
                    </button>
                </div>

                <!-- Scrollable Container -->
                <div style="max-height: 400px; overflow-y: auto;" class="pr-2">

                    <!-- Skeleton Loading -->
                    <div class="animate-pulse space-y-4" id="loadingSkeleton">
                        <div class="h-20 bg-gray-100 rounded-lg"></div>
                        <div class="h-20 bg-gray-100 rounded-lg"></div>
                        <div class="h-20 bg-gray-100 rounded-lg"></div>
                    </div>

                    <!-- Notification List -->
                    <div id="notificationList" class="space-y-2">   
                    </div>
                </div>

                <!-- Empty State -->
                <div id="emptyState" class="hidden text-center py-12">
                    <div class="mb-4 text-6xl text-gray-300">
                        <i class="fas fa-bell-slash"></i>
                    </div>
                    <h3 class="text-gray-500 font-medium">No notifications found</h3>
                    <p class="text-gray-400 text-sm">We'll notify you when something arrives</p>
                </div>
            </div>

            <!-- Notification Details Modal -->
            <div class="modal fade" id="notifModal" tabindex="-1" aria-labelledby="notifModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content rounded-3 shadow">
                        <div class="modal-header bg-green-100 border-bottom-0">
                            <h5 class="modal-title fw-semibold" id="notifModalTitle">Notification</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body" id="notifModalBody">
                            <!-- Message content inserted here -->
                        </div>
                        <div class="modal-footer border-top-0">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Connection Status Indicator -->
            <div id="connectionStatus" class="fixed bottom-2 text-right right-0 text-sm flex items-center bg-white px-3 py-1.5 rounded-full shadow">
                <i class="fas fa-circle text-gray-400 text-xs"></i>
                <span class="ml-2 text-gray-600">Connecting...</span>
            </div>
        </div>
    </div>
</div>

<style>
    .active-tab {
        background-color: white;
        color: #2563eb; /* Tailwind blue-600 */
        border-bottom: 4px solid #3b82f6; /* Tailwind border-blue-500 */
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    const currentUserId = parseInt(getCookie("Id"));
    const tabs = document.querySelectorAll(".notif-tab");
    const list = document.getElementById("notificationList");
    const markAllBtn = document.getElementById("markAllAsRead");
    const searchInput = document.getElementById("searchInput");
    const toggleSearchBtn = document.getElementById("toggleSearch");
    const searchIcon = document.getElementById("searchIcon");
    const closeIcon = document.getElementById("closeIcon");
    let selectedType = "Post Creation";
    let allNotifs = [];

    // Tab Click Handler
    tabs.forEach(tab => {
        tab.addEventListener("click", () => {
            tabs.forEach(t => {
                t.classList.remove("active-tab", "bg-white", "text-blue-600", "border-blue-500");
                t.classList.add("text-gray-600", "border-transparent");
            });

            tab.classList.add("active-tab", "bg-white", "text-blue-600", "border-blue-500");
            tab.classList.remove("text-gray-600", "border-transparent");

            selectedType = tab.dataset.type;
            loadNotifications();
        });
    });

    // Search Toggle
    toggleSearchBtn.addEventListener("click", () => {
        const isSearchVisible = searchInput.style.display === "block";

        if (isSearchVisible) {
            // Hide search input
            searchInput.style.display = "none";
            searchIcon.style.display = "inline";
            closeIcon.style.display = "none";

            // Clear input and refresh
            searchInput.value = "";
            renderNotifications();
        } else {
            // Show search input
            searchInput.style.display = "block";
            searchIcon.style.display = "none";
            closeIcon.style.display = "inline";

            // Focus the input
            searchInput.focus();
        }
    });

    // Search Input Handler
    searchInput.addEventListener("input", renderNotifications);

    // Mark All as Read
    markAllBtn.addEventListener("click", async () => {
        try {
            // Call the backend API to mark all selected type notifications as read
            await fetch(`/api/notifications/admin/mark-all-read/${currentUserId}/${selectedType}`, {
                method: "PUT"
            });

            // Locally update only notifications that match the selected type
            allNotifs = allNotifs.map(n =>
                n.type === selectedType ? { ...n, isRead: true } : n
            );

            renderNotifications();
            updateCountBadges();
        } catch (error) {
            console.error("Error marking all as read:", error);
        }
    });

    // Render Notifications
    function renderNotifications() {
            const filtered = allNotifs.filter(n =>
                n.type === selectedType &&
                (!searchInput.value || n.title.toLowerCase().includes(searchInput.value.toLowerCase()) || n.message.toLowerCase().includes(searchInput.value.toLowerCase()))
            );

            list.innerHTML = "";
            document.getElementById('emptyState').classList.toggle('hidden', filtered.length > 0);

            filtered.forEach(n => {
                const card = document.createElement("div");
                card.className = `group p-3 rounded-lg transition-all cursor-pointer shadow-sm relative
                                ${n.isRead ? 'hover:bg-gray-50' : 'bg-blue-50 border-l-4 border-blue-500'}`;

                card.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div class="flex-1">
                            <div class="flex items-center space-x-3 mb-1.5">
                                ${getTypeIcon(n.type)}
                                <h4 class="font-semibold text-lg ${n.isRead ? 'text-gray-700' : 'text-gray-900'}">
                                    ${n.title}
                                </h4>
                                ${!n.isRead ? '<span class="animate-pulse w-2 h-2 bg-blue-500 rounded-full"></span>' : ''}
                            </div>
                            <p class="text-sm text-gray-600 text-base ml-6">${n.message}</p>
                            <div class="flex items-center space-x-3 text-xs text-blue-900 mt-2 ml-6">
                                <span>${new Date(n.dateCreated).toLocaleDateString()}</span>
                                <span>•</span>
                                <span>${new Date(n.dateCreated).toLocaleTimeString()}</span>
                            </div>
                        </div>
                        <button class="btn btn-outline-primary btn-sm ml-3 mt-1 viewNotifBtn"
                                data-bs-toggle="modal" data-bs-target="#notifModal"
                                data-title="${n.title}" data-message="${n.message}" data-date="${new Date(n.dateCreated).toLocaleString()}"
                                data-type="${n.type}">
                            View
                        </button>
                    </div>
                `;

                card.onclick = () => handleNotificationClick(n);
                list.appendChild(card);
            });

            const hasUnread = filtered.some(n => !n.isRead);
            markAllBtn.classList.toggle('hidden', !hasUnread);

            // Attach modal content logic
            document.querySelectorAll('.viewNotifBtn').forEach(btn => {
                btn.addEventListener('click', e => {
                    e.stopPropagation(); // Prevent triggering the card click

                    const title = btn.getAttribute('data-title');
                    const message = btn.getAttribute('data-message');
                    const date = btn.getAttribute('data-date');
                    const type = btn.getAttribute('data-type');

                    // Inject content into the modal dynamically
                    document.getElementById('notifModalTitle').textContent = title;
                    document.getElementById('notifModalBody').innerHTML = `
                        <div class="mb-2">
                            <strong>Message:</strong> <p class="text-gray-700">${message}</p>
                        </div>
                        <div class="mb-2">
                            <strong>Received On:</strong> <span class="text-muted">${date}</span>
                        </div>
                    `;
                });
            });
        }

    // SignalR Connection
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/notificationHub")
        .configureLogging(signalR.LogLevel.Warning)
        .withAutomaticReconnect([0, 2000, 5000, 10000, 30000])
        .build();

    // SignalR Handlers
    connection.on("ReceiveNotification", notif => {
        if (notif.userId === currentUserId) {
            showNewNotificationToast(notif);
            allNotifs.unshift({ ...notif, isRead: false });
            updateCountBadges();
            renderNotifications();
        }
    });

    connection.onclose(() => updateConnectionStatus('disconnected'));
    connection.onreconnecting(() => updateConnectionStatus('reconnecting'));
    connection.onreconnected(() => updateConnectionStatus('connected'));

    // Start Connection
    async function startConnection() {
        if (connection.state === signalR.HubConnectionState.Connected ||
            connection.state === signalR.HubConnectionState.Connecting ||
            connection.state === signalR.HubConnectionState.Reconnecting) {
            return;
        }

        try {
            await connection.start();
            updateConnectionStatus('connected');
            await loadNotifications();
        } catch (err) {
            console.error("SignalR connection error:", err);
            setTimeout(startConnection, 5000);
        }
    }

    // Notification Click Handler
    async function handleNotificationClick(notif) {
        if (!notif.isRead) {
            try {
                await fetch(`/api/notifications/admin/mark-read/${currentUserId}/${notif.notificationId}`, { method: "PUT" });
                notif.isRead = true;
                renderNotifications();
                updateCountBadges();
            } catch (error) {
                console.error("Error marking as read:", error);
            }
        }
        if (notif.link) window.location.href = notif.link;
    }

    // Load Notifications
    async function loadNotifications() {
        try {
            document.getElementById('loadingSkeleton').classList.remove('hidden');
            const res = await fetch(`/api/notifications/admin/${currentUserId}/${selectedType}`);
            allNotifs = await res.json();
            updateCountBadges();
            renderNotifications();
        } catch (error) {
            console.error("Error loading notifications:", error);
        } finally {
            document.getElementById('loadingSkeleton').classList.add('hidden');
        }
    }

    // Helper Functions
    function getTypeIcon(type) {
        return {
            'Post Creation': '<i class="fas fa-pencil-alt text-blue-500"></i>',
            'Post Like': '<i class="fas fa-thumbs-up text-green-500"></i>',
            'Post Reply': '<i class="fas fa-comment text-blue-500"></i>',
            'Announcement': '<i class="fas fa-bullhorn text-green-500"></i>',
            'Event': '<i class="fas fa-calendar-alt text-blue-500"></i>',
            'Poll': '<i class="fas fa-poll text-green-500"></i>',
            'Facility': '<i class="fas fa-user text-blue-500"></i>',
            'Account': '<i class="fas fa-user text-green-500"></i>',
        }[type] || '<i class="fas fa-bell text-gray-400"></i>'; 
    }

    async function updateCountBadges() {
        try {
            const res = await fetch(`/api/notifications/admin/type/unread-count/${currentUserId}`);
            const counts = await res.json();

            const countMap = {
                'Post Creation': 0,
                'Post Like': 0,
                'Post Reply': 0,
                'Announcement': 0,
                'Event': 0,
                'Poll': 0,
                'Facility': 0,
                'Account': 0
            };

            counts.forEach(c => {
                countMap[c.type] = c.count;
            });

            // Update UI
            const badgeMap = {
                'Post Creation': document.getElementById('creation-count'),
                'Post Like': document.getElementById('like-count'),
                'Post Reply': document.getElementById('reply-count'),
                'Announcement': document.getElementById('announcement-count'),
                'Event': document.getElementById('event-count'),
                'Poll': document.getElementById('poll-count'),
                'Facility': document.getElementById('facility-count'),
                'Account': document.getElementById('account-count')
            };

            Object.keys(badgeMap).forEach(type => {
                const badge = badgeMap[type];
                const count = countMap[type];

                if (!count || count === 0) {
                    badge.style.display = 'none';
                } else {
                    badge.textContent = count;
                    badge.style.display = 'inline-block';
                }
            });
        } catch (error) {
            console.error("Error fetching unread count by type:", error);
        }
    }

    function updateConnectionStatus(status) {
        const statusElem = document.getElementById('connectionStatus');
        statusElem.innerHTML = `
            <i class="fas fa-circle
                ${status === 'connected' ? 'text-green-500' :
                  status === 'reconnecting' ? 'text-yellow-500' : 'text-red-500'}
                text-xs"></i>
            <span class="ml-2 text-gray-600">
                ${status.charAt(0).toUpperCase() + status.slice(1)}
            </span>
        `;
    }

    function showNewNotificationToast(notif) {
        const toast = document.createElement('div');
        toast.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-lg border-l-4 ${
            notif.type === 'Post Creation' ? 'border-blue-500 bg-blue-50' :
            notif.type === 'Post Like' ? 'border-blue-500 bg-green-50' :
            notif.type === 'Post Reply' ? 'border-green-500 bg-blue-50' :
            notif.type === 'Announcement' ? 'border-blue-500 bg-green-50' :
            notif.type === 'Event' ? 'border-green-500 bg-blue-50' :
            notif.type === 'Poll' ? 'border-blue-500 bg-green-50' :
            notif.type === 'Facility' ? 'border-green-500 bg-blue-50' :
            notif.type === 'Account' ? 'border-blue-500 bg-green-50' :
            'border-purple-500 bg-purple-50'
        } animate-slide-in`;

        toast.innerHTML = `
            <div class="flex items-center space-x-3">
                ${getTypeIcon(notif.type)}
                <div>
                    <p class="font-medium text-gray-800 p2">${notif.title}</p>
                    <p class="text-sm text-gray-600 p2">${notif.message}</p>
                </div>
            </div>
        `;

        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 5000);
    }

    function getCookie(name) {
        const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
        return match ? match[2] : null;
    }

    // Initialize
    startConnection();
</script>