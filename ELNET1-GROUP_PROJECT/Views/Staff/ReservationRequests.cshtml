@{
    Layout = "_StaffLayout";
    ViewData["Title"] = "Staff | Reservation Request";
}

<div class="flex flex-row overflow-hidden pt-2 flex-shrink-0">
    <!-- Sidebar -->
    <div class="sidebar bg-white rounded-tr-2xl rounded-br-2xl shadow-xl w-64 h-screen flex flex-col">
        <!-- Sidebar Header -->
        <div class="px-6 py-8 border-b border-gray-100">
            <h2 class="text-xl font-bold text-blue-600 text-center">Staff Panel</h2>
        </div>

        <!-- Navigation Links -->
        <ul class="flex-1 px-4 py-6 space-y-2">
            <li class="nav-item">
                <a href="/staff/dashboard" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Dashboard" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-home w-5 h-5 mr-3"></i>
                    <span class="font-medium">Dashboard</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/pass/visitors" style="text-decoration: none;"
                   class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"]?.ToString() == "VisitorsPass" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-tasks w-5 h-5 mr-3"></i>
                    <span class="font-medium">Visitors Pass</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/vehicle/registration" style="text-decoration: none;"
                   class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"]?.ToString() == "VehicleRegistration" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-chart-line w-5 h-5 mr-3"></i>
                    <span class="font-medium">Vehicle Registration</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/requests/reservation" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "ReservationRequests" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-bell w-5 h-5 mr-3"></i>
                    <span class="font-medium">Reservation Requests</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/requests/services" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "ServiceRequests" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-tools w-6"></i>
                    <span class="font-medium">Service Requests</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/bills_and_payments" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "BillsAndPayments" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-file-invoice-dollar w-6"></i>
                    <span class="font-medium">Bills & Payments</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/poll_management" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Poll" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-poll w-6"></i>
                    <span class="font-medium">Poll Management</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/reports" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Reports" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-chart-line w-5 h-5 mr-3"></i>
                    <span class="font-medium">Reports</span>
                </a>
            </li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="flex-1 p-2 overflow-y-auto fade-in">
        <div class="bg-white p-3 dark:bg-gray-900 rounded-lg shadow-md">
            <div class="flex items-center mx-auto text-lg space-x-2 mb-4 w-full bg-white text-[#1E3A8A] p-3 rounded-xl shadow-md relative group">
                <h1 class="text-2xl font-bold mb-2 text-blue-900"><i class="fas fa-bell text-lg"></i> Reservation</h1>
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700">Filter by Status</label>
                <select id="statusFilter" class="mt-1 block w-1/2 p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500"
                        style="cursor: pointer; transition: background-color 0.2s, color 0.2s;">
                    <option value="Pending" selected>Pending</option>
                    <option value="Approved">Approved</option>
                    <option value="Declined">Declined</option>
                </select>
            </div>

            <div class="overflow-x-auto">
                <table class="min-w-full border border-gray-200 rounded-lg">
                    <thead class="bg-blue-600 text-white text-base">
                        <tr>
                            <th class="p-3 text-center">ID</th>
                            <th class="p-3 text-center">Facility</th>
                            <th class="p-3 text-center">Requested by</th>
                            <th class="p-3 text-center">Date</th>
                            <th class="p-3 text-center">Time</th>
                            <th class="p-3 text-center">Status</th>
                            <th class="p-3 text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="reservationTable" class="divide-y divide-gray-200 dark:divide-gray-700">
                        <!-- Rows dynamically generated with JS -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Confirmation Modal -->
        <div id="confirmationModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50 flex">
            <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg w-80 max-w-full transform transition-transform">
                <h2 class="text-lg font-bold mb-4 text-center text-gray-900">Confirm Action</h2>
                <p id="modalMessage" class="text-gray-700 mb-6 text-center"></p>
                <div class="flex justify-center space-x-2">
                    <button id="cancelBtn" class="px-4 py-2 bg-gray-300 dark:bg-gray-700 text-gray-900 dark:text-white rounded-md hover:bg-gray-400 dark:hover:bg-gray-600 transition">Cancel</button>
                    <button id="confirmBtn" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition">Confirm</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
      const reservationTable = document.getElementById("reservationTable");
      const statusFilter = document.getElementById("statusFilter");
      const confirmationModal = document.getElementById("confirmationModal");
      const confirmBtn = document.getElementById("confirmBtn");
      const cancelBtn = document.getElementById("cancelBtn");

      let selectedReservationId = null;
      let selectedAction = null;

      // Fetch reservations from backend
      async function fetchReservations(status = "Pending") {
        try {
          const response = await fetch(`/staff/Reservations?status=${status}`);
          const data = await response.json();
          renderReservations(data);
        } catch (error) {
          console.error("Error fetching reservations:", error);
        }
      }

      // Render reservations in table
      function renderReservations(reservations) {
        reservationTable.innerHTML = "";

        if (reservations.length === 0) {
          reservationTable.innerHTML = `
            <tr>
              <td colspan="6" class="text-center p-4 text-gray-500">
                No ${statusFilter.value.charAt(0).toUpperCase() + statusFilter.value.slice(1)} Requests
              </td>
            </tr>`;
          return;
        }

        reservations.forEach((r) => {
          const row = document.createElement("tr");
          row.className = "hover:bg-gray-100 text-base transition";
          row.innerHTML = `
            <td class="p-3 text-center">${r.id}</td>
            <td class="p-3 text-center">${r.facilityName}</td>
            <td class="p-3 text-center">${r.requestedBy}</td>
            <td class="p-3 text-center">${r.schedDate}</td>
            <td class="p-3 text-center">${r.startTime} - ${r.endTime}</td>
            <td class="p-3 text-center">
              <span class="px-2 py-1 text-xs font-semibold rounded ${
                r.status === "Pending"
                  ? "bg-yellow-500 text-white"
                  : r.status === "Approved"
                  ? "bg-green-500 text-white"
                  : "bg-red-500 text-white"
              }">
                ${r.status.toUpperCase()}
              </span>
            </td>
            <td class="p-3 text-center space-x-2">
              ${
                r.status === "Pending"
                  ? `
                <button class="approveBtn px-4 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700 transition" data-id="${r.id}">Approve</button>
                <button class="declineBtn px-4 py-1 text-sm bg-red-600 text-white rounded hover:bg-red-700 transition" data-id="${r.id}">Decline</button>
                `
                  : `<span class="text-gray-500 text-sm">No Actions</span>`
              }
            </td>
          `;
          reservationTable.appendChild(row);
        });

        attachEventListeners();
      }

      // Attach action listeners
      function attachEventListeners() {
        document.querySelectorAll(".approveBtn").forEach((btn) =>
          btn.addEventListener("click", () => openModal(btn.dataset.id, "Approve"))
        );

        document.querySelectorAll(".declineBtn").forEach((btn) =>
          btn.addEventListener("click", () => openModal(btn.dataset.id, "Declined"))
        );
      }

      // Open confirmation modal
        function openModal(reservationId, action) {
            selectedReservationId = reservationId;
            selectedAction = action;
            const modalMessage = document.getElementById("modalMessage");
            modalMessage.textContent = `Are you sure you want to ${action.toLowerCase()} this reservation?`;
            confirmationModal.classList.remove("hidden");
        }

      // Handle modal buttons
      cancelBtn.addEventListener("click", () => confirmationModal.classList.add("hidden"));

      confirmBtn.addEventListener("click", async () => {
        if (selectedReservationId && selectedAction) {
          try {
            await fetch(`/staff/reservations/${selectedReservationId}`, {
              method: "PUT",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ status: selectedAction === "Approve" ? "Approved" : "Declined" }),
            });
            confirmationModal.classList.add("hidden");
            fetchReservations(statusFilter.value);
          } catch (error) {
            console.error("Error updating reservation:", error);
          }
        }
      });

      // Filter reservations
      statusFilter.addEventListener("change", () => fetchReservations(statusFilter.value));

      // Initial fetch
      fetchReservations();
    });
</script>
