@{
    Layout = "_StaffLayout";
    ViewData["Title"] = "Staff | Report";
}

@section Scripts {
    <script src="~/js/notification-staff.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- SheetJS (xlsx) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <!-- jsPDF and AutoTable -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>
    <!-- docx library -->
    <script src="https://unpkg.com/docx@7.6.0/build/index.js"></script>
}


<div class="flex flex-row overflow-hidden pt-2 flex-shrink-0">
    <!-- Sidebar -->
    <div class="sidebar bg-white rounded-tr-2xl rounded-br-2xl shadow-xl w-64 flex flex-col">
        <!-- Sidebar Header -->
        <div class="px-3 py-2 border-b border-gray-100">
            <h2 class="text-xl font-bold text-blue-600 text-center">Staff Panel</h2>
        </div>

        <!-- Navigation Links -->
        <ul class="flex-1 px-4 py-6 space-y-2">
            <li class="nav-item">
                <a href="/staff/dashboard" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Dashboard" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-home w-5 h-5 mr-3"></i>
                    <span class="font-medium">Dashboard</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/pass/visitors" style="text-decoration: none;"
                   class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"]?.ToString() == "VisitorsPass" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-tasks w-5 h-5 mr-3"></i>
                    <span class="font-medium">Visitors Pass</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/vehicle/registration" style="text-decoration: none;"
                   class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"]?.ToString() == "VehicleRegistration" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-chart-line w-5 h-5 mr-3"></i>
                    <span class="font-medium">Vehicle Registration</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/requests/reservation" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "ReservationRequests" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-bell w-5 h-5 mr-3"></i>
                    <span class="font-medium">Reservation Requests</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/requests/services" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "ServiceRequests" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-tools w-6"></i>
                    <span class="font-medium">Service Requests</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/bills_and_payments" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "BillsAndPayments" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-file-invoice-dollar w-6"></i>
                    <span class="font-medium">Bills & Payments</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/poll_management" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Poll" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-poll w-6"></i>
                    <span class="font-medium">Poll Management</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/reports" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Reports" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-chart-line w-5 h-5"></i>
                    <span class="font-medium">Reports</span>
                </a>
            </li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="flex-1 p-3 w-full overflow-y-auto fade-in">
         <div class="container">
            <div class="mx-autospace-x-1 mb-4 w-full bg-white text-[#1E3A8A] p-3 rounded-xl shadow-md flex items-center justify-between">
                <h1 class="text-2xl font-bold text-blue-900 flex items-center"><i class="fas fa-chart-line w-5 h-5 mr-3"></i> Reports</h1>
            </div>
            
            <ul class="nav nav-tabs" id="reportTabs" role="tablist">
                <li class="nav-item">
                    <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#analyticsPanel" type="button">Analytics</button>
                </li>
                <li class="nav-item">
                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#generatePanel" type="button">Generate Report</button>
                </li>
            </ul>

            <div class="tab-content p-4 border rounded-bottom shadow-sm bg-white">
                <!-- ANALYTICS -->
                <div class="tab-pane fade show active" id="analyticsPanel">
                    <h4 class="fw-bold text-primary mb-4">Analytics Dashboard</h4>
                    <div class="row g-2" style="max-height: 440px; overflow-y: auto;">

                        <!-- Line Chart for Reservations Over Time -->
                        <div class="col-md-6">
                            <div class="card shadow-sm border-0 rounded-4">
                                <div class="card-body">
                                    <h6 class="text-muted">Reservation Trends</h6>
                                    <canvas id="reservationChart" height="100"></canvas>
                                </div>
                            </div>
                        </div>

                        <!-- Bar Chart for Payment Revenue -->
                        <div class="col-md-6">
                            <div class="card shadow-sm border-0 rounded-4">
                                <div class="card-body">
                                    <h6 class="text-muted">Monthly Revenue</h6>
                                    <canvas id="paymentChart" height="100"></canvas>
                                </div>
                            </div>
                        </div>

                        <!-- Pie Chart for Feedback Ratings -->
                        <div class="col-md-6">
                            <div class="card shadow-sm border-0 rounded-4">
                                <div class="card-body" style="height: 100%; display: flex; flex-direction: column; justify-content: space-between;">
                                    <h6 class="text-muted">Feedback Rating Distribution</h6>
                                    <canvas id="feedbackChart" style="flex-grow: 1;"></canvas>
                                </div>
                            </div>
                        </div>

                        <!-- Doughnut Chart for Vehicle Type -->
                        <div class="col-md-6">
                            <div class="card shadow-sm border-0 rounded-4">
                                <div class="card-body" style="height: 100%; display: flex; flex-direction: column; justify-content: space-between;">
                                    <h6 class="text-muted">Vehicle Types Registered</h6>
                                    <canvas id="vehicleChart" style="flex-grow: 1;"></canvas>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

                <!-- REPORT GENERATION -->
                <div class="tab-pane fade" id="generatePanel">
                    <h4 class="mb-3">Generate Reports</h4>

                    <!-- Report Filter Form -->
                    <form id="reportForm">
                        <!-- Report Type -->
                        <div class="mb-3">
                            <label for="reportType" class="form-label">Report Type</label>
                            <select name="reportType" id="reportType" class="form-select" required>
                                <option value="RESERVATIONS" selected>Reservations</option>
                                <option value="SERVICE_REQUEST">Service Requests</option>
                                <option value="VEHICLE_REGISTRATION">Vehicle Registration</option>
                                <option value="VISITOR_PASSES">Visitor Passes</option>
                            </select>
                        </div>

                        <!-- Status filter tabs -->
                        <div id="statusTabsContainer" class="mb-3">
                            <ul class="nav nav-tabs" id="statusTabs">
                            </ul>
                        </div>

                        <!-- Date Range Filter -->
                        <div class="mb-3" id="dateRangeGroup">
                            <label class="form-label">Date Range</label>
                            <div class="input-group">
                                <input type="date" name="startDate" id="startDate" class="form-control">
                                <span class="input-group-text">to</span>
                                <input type="date" name="endDate" id="endDate" class="form-control">
                            </div>
                        </div>
                        <small id="dateError" class="text-danger d-none mt-1">
                            Start date cannot be later than end date.
                        </small>

                        <!-- Vehicle Filters (Only visible when Vehicle Registration is selected) -->
                        <div id="vehicleFilters" class="mb-3" style="display: none;">
                            <div class="row">
                                <div class="col-md-6">
                                    <label for="vehicleType" class="form-label">Vehicle Type</label>
                                    <select id="vehicleType" class="form-select">
                                        <option value="">All</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label for="vehicleBrand" class="form-label">Vehicle Brand</label>
                                    <select id="vehicleBrand" class="form-select">
                                        <option value="">All</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Report Format -->
                        <div class="mb-3">
                            <label for="reportFormat" class="form-label">Report Format</label>
                            <select name="format" id="reportFormat" class="form-select">
                                <option value="XLSX">Excel (XLSX)</option>
                                <option value="PDF">PDF</option>
                                <option value="DOCX">Word (DOCX)</option>
                            </select>
                        </div>

                        <!-- Generate Button -->
                        <button type="submit" class="btn btn-primary">Generate Report</button>
                    </form>

                    <!-- Data Display -->
                    <div id="reportDataContainer" class="mt-4">
                        <table class="table table-bordered table-striped">
                            <thead id="reportTableHead"></thead>
                            <tbody id="reportTableBody"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast for Success -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="reportToast" class="toast align-items-center text-bg-success border-0" role="alert">
            <div class="d-flex">
                <div class="toast-body">Report generated successfully!</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        </div>
    </div>
</div>

<script>
    window.onload = function() {
        // Reservation Trend Chart (Line chart)
        var reservationCtx = document.getElementById('reservationChart').getContext('2d');
        var reservationChart = new Chart(reservationCtx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(ViewBag.ReservationMonths)), // Labels for the months (e.g. "2023-01")
                datasets: [{
                    label: 'Reservations Trend',
                    data: @Html.Raw(Json.Serialize(ViewBag.ReservationCounts)), // Data for the reservations per month
                    borderColor: '#4e73df', // Line color
                    backgroundColor: 'rgba(78, 115, 223, 0.1)', // Background for the area under the line
                    fill: true,
                    tension: 0.4, // For smooth curves
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Payment Trend Chart (Bar chart)
        var paymentCtx = document.getElementById('paymentChart').getContext('2d');
        var paymentChart = new Chart(paymentCtx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(ViewBag.PaymentMonths)), // Labels for the months
                datasets: [{
                    label: 'Payments Trend',
                    data: @Html.Raw(Json.Serialize(ViewBag.PaymentTotals)), // Data for the payment totals per month
                    backgroundColor: '#1cc88a', // Bar color
                    borderColor: '#1cc88a',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Feedback Ratings Chart (Pie chart)
        var feedbackData = @Html.Raw(Json.Serialize(ViewBag.FeedbackRatings));
        var feedbackCtx = document.getElementById('feedbackChart').getContext('2d');

        var feedbackChart = new Chart(feedbackCtx, {
            type: 'pie',
            data: {
                labels: feedbackData.map(f => `${f.rating} Star`), // Change number to "X Star"
                datasets: [{
                    label: 'Feedback Ratings Breakdown',
                    data: feedbackData.map(f => f.count), // Count of each rating
                    backgroundColor: ['#ff5733', '#ffbd33', '#75ff33', '#33aaff', '#5733ff'], // Segment colors
                    borderColor: ['#ff5733', '#ffbd33', '#75ff33', '#33aaff', '#5733ff'], // Border colors
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true
            }
        });
            // Vehicle Types Chart (Doughnut chart)
            var vehicleData = @Html.Raw(Json.Serialize(ViewBag.VehicleTypes));
            var vehicleCtx = document.getElementById('vehicleChart').getContext('2d');
            var vehicleChart = new Chart(vehicleCtx, {
                type: 'doughnut',
                data: {
                    labels: vehicleData.map(v => v.type), // Vehicle types (e.g., Sedan, SUV, etc.)
                    datasets: [{
                        label: 'Vehicle Types Breakdown',
                        data: vehicleData.map(v => v.count), // Count of each vehicle type
                        backgroundColor: ['#ff6f61', '#6a5acd', '#ff1493', '#20b2aa', '#f0e68c'], // Segment colors
                        borderColor: ['#ff6f61', '#6a5acd', '#ff1493', '#20b2aa', '#f0e68c'], // Border colors
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true
                }
            });
    };

    // For Generating Report Part
    document.addEventListener("DOMContentLoaded", function () {
        // Initialize UI components
      //  document.getElementById("reportType").dispatchEvent(new Event("change"));

      fetch('/staff/getvehiclefilteroptions') // update URL if needed
        .then(response => response.json())
        .then(data => {
            const vehicleTypeSelect = document.getElementById('vehicleType');
            const vehiclecarBrandSelect = document.getElementById('vehicleBrand');

            data.types.forEach(type => {
                const option = document.createElement('option');
                option.value = type;
                option.textContent = type;
                vehicleTypeSelect.appendChild(option);
            });

            data.carbrands.forEach(carbrand => {
                const option = document.createElement('option');
                option.value = carbrand;
                option.textContent = carbrand;
                vehiclecarBrandSelect.appendChild(option);
            });
        })
        .catch(error => {
            console.error('Error loading vehicle options:', error);
        });

        const reportTypeSelect = document.getElementById("reportType");
        const statusTabsContainer = document.getElementById("statusTabsContainer");
        const statusTabs = document.getElementById("statusTabs");
        const dateRangeGroup = document.getElementById("dateRangeGroup");
        const vehicleFilters = document.getElementById("vehicleFilters");
        const startDateInput = document.getElementById("startDate");
        const endDateInput = document.getElementById("endDate");
        const dateError = document.getElementById("dateError");
        const generateBtn = document.querySelector('button[type="submit"]');

        function formatDateToLocalYYYYMMDD(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        function setCurrentMonthRange() {
            const now = new Date();
            const year = now.getFullYear();
            const month = now.getMonth();

            const start = new Date(year, month, 1);
            const end = new Date(year, month + 1, 0);

            startDateInput.value = formatDateToLocalYYYYMMDD(start);
            endDateInput.value = formatDateToLocalYYYYMMDD(end);
        }

        // Validate date range and show/hide error
        function validateDateRange() {
            const start = new Date(startDateInput.value);
            const end = new Date(endDateInput.value);

            const isInvalid = start > end || !startDateInput.value || !endDateInput.value;

            if (isInvalid) {
                dateError.classList.remove("d-none");
                generateBtn.disabled = true;
            } else {
                dateError.classList.add("d-none");
                generateBtn.disabled = false;
            }
        }

        // Rebuild status tabs based on report type
        function updateStatusTabs(reportType) {
            const statusOptions = {
                RESERVATIONS: ["All", "Approved", "Declined"],
                SERVICE_REQUEST: ["All", "Scheduled", "Completed", "Cancelled", "Rejected"],
                VEHICLE_REGISTRATION: ["All", "Active", "Inactive"],
                VISITOR_PASSES: ["All", "Active", "Deleted", "Prohibited"]
            };

            const statuses = statusOptions[reportType] || [];
            statusTabs.innerHTML = "";

            statuses.forEach((status, index) => {
                const li = document.createElement("li");
                li.className = "nav-item";

                const a = document.createElement("a");
                a.className = `nav-link ${index === 0 ? "active" : ""}`;
                a.href = "#";
                a.dataset.status = status;
                a.textContent = status;

                a.addEventListener("click", function (e) {
                    try {
                        e.preventDefault();
                        document.querySelectorAll("#statusTabs a").forEach(t => t.classList.remove("active"));
                        this.classList.add("active");
                    } catch (error) {
                        console.error("Tab switch error:", error);
                        alert("Error switching tabs");
                    }
                });

                li.appendChild(a);
                statusTabs.appendChild(li);
            });
        }

        // Initial set
        setCurrentMonthRange();
        validateDateRange();
        updateStatusTabs("RESERVATIONS");

        // Change handler for report type
        reportTypeSelect.addEventListener("change", function () {
            try {
                const reportType = this.value;

                updateStatusTabs(reportType);
                setCurrentMonthRange();

                dateRangeGroup.style.display = reportType === "VEHICLE_REGISTRATION" ? "none" : "block";
                vehicleFilters.style.display = reportType === "VEHICLE_REGISTRATION" ? "block" : "none";

            } catch (error) {
                console.error("Report type change error:", error);
                alert("Error changing report type");
            }
        });

        // Add input validation listener
        [startDateInput, endDateInput].forEach(input => {
            input.addEventListener("change", validateDateRange);
        });

        // Robust form submission handler
        document.getElementById("reportForm").addEventListener("submit", async function (e) {
            e.preventDefault();
            const startTime = performance.now();

            try {
                const reportType = document.getElementById("reportType").value;
                const format = document.getElementById("reportFormat").value.toUpperCase();

                if (!["XLSX", "PDF", "DOCX"].includes(format)) {
                    throw new Error("Invalid format selected");
                }

                await fetchReportData(async (data) => {
                    switch(format) {
                        case "XLSX":
                            await generateExcelReport(data, reportType);
                            break;
                        case "PDF":
                            await generatePdfReport(data, reportType);
                            break;
                        case "DOCX":
                            await generateDocxReport(data, reportType);
                            break;
                    }
                });
            } catch (error) {
                console.error("Report generation error:", error);
                alert(`Report generation failed: ${error.message}`);
            } finally {
                console.log(`Report generated in ${performance.now() - startTime}ms`);
            }
        });
    });

    async function fetchReportData(callback) {
        try {
            const reportType = document.getElementById("reportType").value;
            const statusTab = document.querySelector("#statusTabs a.active");
            const status = statusTab?.getAttribute("data-status") || 'active';

            const formData = new FormData();
            formData.append("reportType", reportType);
            formData.append("status", status);

            if (reportType === "VEHICLE_REGISTRATION") {
                formData.append("vehicleType", document.getElementById("vehicleType").value);
                formData.append("carbrand", document.getElementById("vehicleBrand").value);
            } else {
                formData.append("startDate", document.getElementById("startDate").value);
                formData.append("endDate", document.getElementById("endDate").value);
            }

            console.log("print",status)
            const response = await fetch('/Staff/GetReportData', {
                method: "POST",
                body: formData
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            callback(data);
        } catch (error) {
            console.error("Data fetch error:", error);
            throw error;
        }
    }

     async function generateExcelReport(data, reportType) {
            return new Promise((resolve, reject) => {
                try {
                    let hasRejected = false;
                    let hasScheduledOrCompletedOrCancelled = false;

                    data.forEach(row => {
                        const status = row.status || row.Status;
                        if (status === "Rejected") hasRejected = true;
                        if (["Scheduled", "Completed", "Cancelled"].includes(status)) {
                            hasScheduledOrCompletedOrCancelled = true;
                        }
                    });

                    const headerMap = {
                        VEHICLE_REGISTRATION: {
                            vehicleId: "Vehicle ID",
                            plateNumber: "Plate Number",
                            type: "Type",
                            carBrand: "Vehicle Brand",
                            status: "Status",
                            ownerName: "Owner Name"
                        },
                        RESERVATIONS: {
                            reservationId: "Reservation ID",
                            facilityName: "Facility Name",
                            dateReserved: "Date Reserved",
                            startTime: "Start Time",
                            endTime: "End Time",
                            status: "Status",
                            reservedBy: "Reserved By"
                        },
                        SERVICE_REQUEST: {
                            ServiceRequestId: "Request ID",
                            ReqType: "Request Type",
                            Description: "Description",
                            Status: "Status",
                            DateSubmitted: "Date Submitted",
                            RequestedBy: "Requested By"
                            // 'rejectedReason' and 'scheduleDate' will be added conditionally below
                        },
                        VISITOR_PASSES: {
                            visitorId: "Visitor ID",
                            visitorName: "Visitor Name",
                            dateTime: "Visit Date & Time",
                            status: "Status",
                            relationship: "Relationship",
                            homeownerName: "Homeowner Name"
                        }
                    };

                    // Extend SERVICE_REQUEST headers based on data
                    if (reportType === "SERVICE_REQUEST") {
                        if (hasRejected) {
                            headerMap.SERVICE_REQUEST.RejectedReason = "Rejected Reason";
                        }
                        if (hasScheduledOrCompletedOrCancelled) {
                            headerMap.SERVICE_REQUEST.ScheduleDate = "Schedule Date";
                        }
                    }

                    const baseHeaders = Object.keys(headerMap[reportType]);
                    const mappedHeaders = baseHeaders.map(h => headerMap[reportType][h]);

                    // Format data rows with fallback "-"
                    const formattedData = data.map(row => {
                        const formattedRow = {};
                        baseHeaders.forEach((key, idx) => {
                            let value = row[key] ?? row[toPascalCase(key)];
                            formattedRow[mappedHeaders[idx]] = value != null ? value : "-";
                        });
                        return formattedRow;
                    });

                    // Sheet setup
                    const worksheet = XLSX.utils.json_to_sheet(formattedData, { origin: "A4" });

                    const maxColWidths = mappedHeaders.map(header => {
                        const maxContent = Math.max(
                            header.length,
                            ...formattedData.map(row => (row[header]?.toString()?.length || 0))
                        );
                        return { wch: maxContent + 2 };
                    });
                    worksheet['!cols'] = maxColWidths;

                    const totalColumns = mappedHeaders.length;
                    const mergeRange1 = { s: { r: 0, c: 0 }, e: { r: 0, c: totalColumns - 1 } };
                    const mergeRange2 = { s: { r: 1, c: 0 }, e: { r: 1, c: totalColumns - 1 } };

                    worksheet['!merges'] = [mergeRange1, mergeRange2];

                    // Header rows
                    XLSX.utils.sheet_add_aoa(worksheet, [
                        [`${toTitleExcelCase(reportType.replaceAll("_", " "))} Report`],
                        ['Home Subdivision where everyone meets their happy place'],
                        [], // empty row
                    ], { origin: "A1" });

                    // Style: header row (bold and colored)
                    const range = XLSX.utils.decode_range(worksheet['!ref']);
                    for (let C = range.s.c; C <= range.e.c; ++C) {
                        const cell = worksheet[XLSX.utils.encode_cell({ r: 3, c: C })];
                        if (cell) {
                            cell.s = {
                                font: { bold: true, color: { rgb: "FFFFFF" } },
                                fill: { fgColor: { rgb: "293593" } }
                            };
                        }
                    }

                    // Title and tagline styles
                    const titleCell = worksheet["A1"];
                    if (titleCell) {
                        titleCell.s = {
                            font: { bold: true, sz: 16 },
                            alignment: { horizontal: "center" }
                        };
                    }

                    const taglineCell = worksheet["A2"];
                    if (taglineCell) {
                        taglineCell.s = {
                            font: { italic: true, sz: 12 },
                            alignment: { horizontal: "center" }
                        };
                    }

                    const workbook = XLSX.utils.book_new();
                    XLSX.utils.book_append_sheet(workbook, worksheet, "Report");

                    XLSX.writeFile(workbook, `${reportType.replace(/\s+/g, "_").toLowerCase()}_report.xlsx`);
                    resolve();
                } catch (error) {
                    reject(error);
                }
            });

            function toPascalCase(str) {
                return str.replace(/(^\w|_\w)/g, s => s.replace('_', '').toUpperCase());
            }

            function toTitleExcelCase(str) {
                return str.replace(/\w\S*/g, txt =>
                    txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()
                );
            }
        }

    async function generatePdfReport(data, reportType) {
         return new Promise((resolve, reject) => {
             try {
                 const { jsPDF } = window.jspdf;
                 const doc = new jsPDF();
                 const title = `${toTitleCase(reportType.replaceAll("_", " "))} Report`;

                 // PDF metadata
                 doc.setProperties({
                     title,
                     subject: 'Generated by Subvi System',
                     author: 'Subvi Reporting Service'
                 });

                 // Logo + Header
                 const img = new Image();
                 img.src = '/images/subvi-logo.png';

                 img.onload = () => {
                     doc.addImage(img, 'PNG', 14, 10, 20, 20);
                     doc.setFontSize(18);
                     doc.setTextColor(40, 53, 147);
                     doc.text(title, 38, 20);

                     doc.setFontSize(10);
                     doc.setTextColor(100);
                     doc.text("Home Subdivision where everyone meets their happy place", 38, 26);

                     // Early return if no data
                     if (!data || data.length === 0) {
                         doc.setFontSize(14);
                         doc.setTextColor(200, 0, 0);
                         const msg = "No records found for this report.";
                         const pageWidth = doc.internal.pageSize.getWidth();
                         const textWidth = doc.getTextWidth(msg);
                         doc.text(msg, (pageWidth - textWidth) / 2, 50);

                         doc.save(`${title.replaceAll(" ", "_")}_report.pdf`);
                         return resolve();
                     }

                     // Header Mapping
                     const headerMap = {
                         VEHICLE_REGISTRATION: {
                             vehicleId: "Vehicle ID",
                             plateNumber: "Plate Number",
                             type: "Type",
                             carBrand: "Vehicle Brand",
                             status: "Status",
                             ownerName: "Owner Name"
                         },
                         RESERVATIONS: {
                             reservationId: "Reservation ID",
                             facilityName: "Facility Name",
                             dateReserved: "Date Reserved",
                             startTime: "Start Time",
                             endTime: "End Time",
                             status: "Status",
                             reservedBy: "Reserved By"
                         },
                         SERVICE_REQUEST: () => ({
                             ServiceRequestId: "Request ID",
                             ReqType: "Request Type",
                             Description: "Description",
                             Status: "Status",
                             DateSubmitted: "Date Submitted",
                             RequestedBy: "Requested By"
                         }),
                         VISITOR_PASSES: {
                             visitorId: "Visitor ID",
                             visitorName: "Visitor Name",
                             dateTime: "Visit Date & Time",
                             status: "Status",
                             relationship: "Relationship",
                             homeownerName: "Homeowner Name"
                         }
                     };

                     // --- Format data and headers ---
                     let finalData = data;
                     let mappedHeaders;

                     if (reportType === "SERVICE_REQUEST") {
                         const isRejectedExist = data.some(d => d.RejectedReason);
                         const isScheduledExist = data.some(d => d.ScheduleDate);
                         const showCombined = isRejectedExist && isScheduledExist;

                         finalData = data.map(d => {
                             const clone = { ...d };

                             if (showCombined) {
                                 clone.RejectedOrSchedule = `${d.RejectedReason || ''}${d.RejectedReason && d.ScheduleDate ? ' / ' : ''}${d.ScheduleDate || ''}`;
                                 delete clone.RejectedReason;
                                 delete clone.ScheduleDate;
                             }

                             return clone;
                         });

                         mappedHeaders = Object.keys(finalData[0]).map(key => {
                             if (key === "RejectedOrSchedule") return "Rejected Reason / Schedule Date";
                             return headerMap[reportType]()[key] || key;
                         });
                     } else {
                         const headersRaw = Object.keys(data[0]);
                         mappedHeaders = headersRaw.map(h => headerMap[reportType]?.[h] || h);
                     }

                     const headers = [mappedHeaders];
                     const rows = finalData.map(record => Object.values(record));

                     // Generate table
                     doc.autoTable({
                         head: headers,
                         body: rows,
                         startY: 35,
                         theme: 'grid',
                         styles: { cellPadding: 2, fontSize: 10, halign: 'center' },
                         headStyles: { fillColor: [40, 53, 147], textColor: 255, halign: 'center' }
                     });

                     // Footer
                     const pageCount = doc.getNumberOfPages();
                     for (let i = 1; i <= pageCount; i++) {
                         doc.setPage(i);
                         doc.setFontSize(10);
                         doc.text(`Page ${i} of ${pageCount}`, doc.internal.pageSize.width - 40, doc.internal.pageSize.height - 10);
                     }

                     const reportTitle = toTitleCase(reportType.replaceAll("_", " "));
                     doc.save(`${reportTitle.replaceAll(" ", "_")}_report.pdf`);
                     resolve();
                 };
             } catch (error) {
                 reject(error);
             }
         });
     }

    async function generateDocxReport(data, reportType) {
        try {
            const { Document, Packer, Paragraph, Table, TableRow, TableCell, TextRun, AlignmentType, ImageRun, WidthType } = docx;

            const children = [];

            // Load logo as base64
            const imageUrl = "/images/subvi-logo.png";
            const response = await fetch(imageUrl);
            const imageBlob = await response.blob();
            const arrayBuffer = await imageBlob.arrayBuffer();

            // Logo and header
            children.push(
                new Paragraph({
                    alignment: AlignmentType.CENTER,
                    children: [
                        new ImageRun({
                            data: arrayBuffer,
                            transformation: { width: 180, height: 70 }
                        })
                    ]
                }),
                new Paragraph({
                    alignment: AlignmentType.CENTER,
                    children: [
                        new TextRun({
                            text: "Home Subdivision where everyone meets their happy place",
                            italics: true,
                            color: "606060",
                            size: 20
                        })
                    ],
                    spacing: { after: 200 }
                }),
                new Paragraph({
                    alignment: AlignmentType.CENTER,
                    children: [
                        new TextRun({
                            text: `${toTitleCase(reportType.replaceAll("_", " "))} Report`,
                            bold: true,
                            size: 36,
                            color: "2C3587"
                        })
                    ],
                    spacing: { after: 500 }
                })
            );

            // Header mappings
            const headerMappings = {
                VEHICLE_REGISTRATION: {
                    vehicleId: "Vehicle ID",
                    plateNumber: "Plate Number",
                    type: "Vehicle Type",
                    carBrand: "Vehicle Brand",
                    status: "Status",
                    ownerName: "Owner Name"
                },
                RESERVATIONS: {
                    reservationId: "Reservation ID",
                    facilityName: "Facility Name",
                    dateReserved: "Date Reserved",
                    startTime: "Start Time",
                    endTime: "End Time",
                    status: "Status",
                    reservedBy: "Reserved By"
                },
                SERVICE_REQUEST: () => ({
                    ServiceRequestId: "Request ID",
                    Reqtype: "Request Type",
                    Description: "Description",
                    Status: "Status",
                    Datesubmitted: "Date Submitted",
                    Requestedby: "Requested By",
                }),
                VISITOR_PASSES: {
                    visitorId: "Visitor ID",
                    visitorName: "Visitor Name",
                    dateTime: "Date & Time",
                    status: "Status",
                    relationship: "Relationship",
                    homeownerName: "Homeowner Name"
                }
            };

            // Dynamically update the header map for SERVICE_REQUEST
            const showRejectedReason = data.some(record => record.Status === "Rejected");
            const showScheduleDate = data.some(record =>
                ["Scheduled", "Completed", "Cancelled"].includes(record.Status)
            );

                // Build headerMap dynamically
                let headerMap;

                if (reportType === "SERVICE_REQUEST") {
                    headerMap = {
                        serviceRequestId: "Request ID",
                        reqType: "Request Type",
                        description: "Description",
                        status: "Status",
                        dateSubmitted: "Date Submitted",
                        requestedBy: "Requested By"
                    };

                    if (showRejectedReason) {
                        headerMap.rejectedReason = "Rejected Reason";
                    }

                    if (showScheduleDate) {
                        headerMap.scheduleDate = "Schedule Date";
                    }
                } else {
                    // Use static map for other types
                    headerMap = headerMappings[reportType];
                }

                const finalData = data.map(record => {
                    const rowData = {};

                    Object.keys(headerMap).forEach(key => {
                        rowData[key] = record[key] || record[toPascalCase(key)] || "-";
                    });

                    return rowData;
                });
            if (finalData?.length > 0) {
                const keys = Object.keys(finalData[0]);
                const headerRow = new TableRow({
                    children: keys.map(key =>
                        new TableCell({
                            children: [new Paragraph({
                                alignment: AlignmentType.CENTER,
                                children: [
                                    new TextRun({
                                        text: headerMap[key] || toTitleCase(key),
                                        bold: true
                                    })
                                ]
                            })],
                            width: { size: 100 / keys.length, type: WidthType.PERCENTAGE }
                        })
                    )
                });

                const dataRows = finalData.map(record =>
                    new TableRow({
                        children: keys.map(key =>
                            new TableCell({
                                children: [new Paragraph({
                                    alignment: AlignmentType.CENTER,
                                    children: [
                                        new TextRun({
                                            text: record[key]?.toString() || "-"
                                        })
                                    ]
                                })],
                                width: { size: 100 / keys.length, type: WidthType.PERCENTAGE }
                            })
                        )
                    })
                );

                const table = new Table({
                    rows: [headerRow, ...dataRows],
                    width: { size: 100, type: WidthType.PERCENTAGE }
                });

                children.push(table);
            } else {
                children.push(
                    new Paragraph({
                        alignment: AlignmentType.CENTER,
                        children: [
                            new TextRun({
                                text: "No records found",
                                color: "FF0000",
                                italics: true
                            })
                        ]
                    })
                );
            }

            const doc = new Document({
                creator: "Subvi Reporting Service",
                title: `${reportType} Report`,
                description: "Generated by Subvi System",
                sections: [{ children }]
            });

            const reportTitle = toTitleCase(reportType.replaceAll("_", " "));
            const fileName = reportTitle.toLowerCase().replaceAll(" ", "_");
            const blob = await Packer.toBlob(doc);
            const url = URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = `${fileName}_report.docx`;
            document.body.appendChild(a);
            a.click();

            setTimeout(() => {
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }, 100);
        } catch (error) {
            console.error("DOCX Generation Error:", error);
            throw error;
        }
    }

    function toPascalCase(str) {
        return str.replace(/(^\w|_\w)/g, s => s.replace('_', '').toUpperCase());
    }

    function toTitleCase(str) {
        return str.toLowerCase().split(' ').map(word =>
            word.charAt(0).toUpperCase() + word.slice(1)
        ).join(' ');
    }
</script>