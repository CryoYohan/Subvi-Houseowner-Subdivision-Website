@{
    Layout = "_StaffLayout";
    ViewData["Title"] = "Staff | Vehicle Registration";
}

<style>
    #carPreview {
        width: 100%;
        height: 300px;
        background: #f8fafc;
        border: 2px solid #e2e8f0;
        border-radius: 12px;
        overflow: hidden;
        position: relative;
    }

    .preview-label {
        position: absolute;
        top: 10px;
        left: 10px;
        background: rgba(255, 255, 255, 0.9);
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.9em;
        color: #1e293b;
    }

    .form-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
    }

    .input-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: #475569;
        font-weight: 500;
    }

    .input-group input,
    .input-group select {
        width: 100%;
        padding: 0.3rem 1rem;
        border: 2px solid #cbd5e1;
        border-radius: 8px;
        transition: border-color 0.2s;
    }

        .input-group input:focus,
        .input-group select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

    .status-badge {
        display: inline-block;
        border-radius: 9999px; 
        font-size: 0.875rem; /* text-sm */
        font-weight: 500;
        padding: 0.25rem 0.75rem; 
        text-align: center; 
    }

    .homeowner-list-item {
        padding: 12px 16px;
        cursor: pointer;
        transition: background-color 0.2s ease;
        border-bottom: 1px solid #f3f4f6;
    }

        .homeowner-list-item:hover {
            background-color: #f9fafb;
        }

        .homeowner-list-item.selected {
            background-color: #eef2ff;
        }

        .homeowner-list-item:last-child {
            border-bottom: none;
        }

    #homeownerList {
        scrollbar-width: thin;
        scrollbar-color: #e5e7eb #f3f4f6;
    }
</style>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/controls/OrbitControls.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

    <script type="importmap">
        {
            "imports": {
                "three": "https://unpkg.com/three@0.128.0/build/three.module.js",
                "three/addons/": "https://unpkg.com/three@0.128.0/examples/jsm/"
            }
        }
    </script>

    <script type="module">
        import * as THREE from 'three';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

        let scene, camera, renderer, controls, carMesh;
        let carPreviewInitialized = false;
        let currentCarData = null;

        function setupInputListeners() {
            // Debounced update function
            const debouncedUpdate = debounce(updateCarModel, 300);
    
            // Add event listeners to all relevant inputs
            ['type', 'color', 'plateNumber', 'vehicleBrand'].forEach(fieldId => {
                document.getElementById(fieldId).addEventListener('input', debouncedUpdate);
            });
        }

        function cleanupCarPreview() {
            if (renderer) {
                renderer.domElement?.remove();
                renderer.dispose();
            }
            if (scene) {
                scene.traverse(child => {
                    if (child.isMesh) {
                        child.geometry?.dispose();
                        child.material?.dispose();
                    }
                });
            }
            controls?.dispose();
            scene = null;
            camera = null;
            renderer = null;
            controls = null;
        }

        // Handle window resize
        function onWindowResize() {
            const container = document.getElementById('carPreview');
            camera.aspect = container.clientWidth / container.clientHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(container.clientWidth, container.height);
        }

        // Initialize 3D Viewer
        function initCarPreview() {
            const container = document.getElementById('carPreview');

            // Scene setup
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);

            // Renderer
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(container.clientWidth, container.clientHeight);
            renderer.setClearColor(0xf3f4f6);
            container.innerHTML = '';
            container.appendChild(renderer.domElement);

            // Lighting
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
            scene.add(ambientLight);

            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(5, 5, 5);
            scene.add(directionalLight);

            // Controls
            controls = new OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;

            // Initial car
            updateCarModel();
            animate();

            // Handle window resize
            window.addEventListener('resize', onWindowResize);
        }

        // Update car model based on inputs
        function updateCarModel() {
            // Remove existing car
            if (carMesh) {
                // Properly dispose of all children geometries and materials
                carMesh.traverse(child => {
                    if (child.isMesh) {
                        child.geometry.dispose();
                        if (child.material) {
                            if (Array.isArray(child.material)) {
                                child.material.forEach(material => material.dispose());
                            } else {
                                child.material.dispose();
                            }
                        }
                    }
                });
                scene.remove(carMesh);
            }

            // Get current values with proper fallbacks
            const type = document.getElementById('type')?.value || 'sedan';
            const color = document.getElementById('color')?.value || '#ffffff';
            const plate = document.getElementById('plateNumber')?.value?.trim() || 'ABC-123';

            // Create new car
            carMesh = createBasicCar(type, color, plate);
            scene.add(carMesh);

            // Position camera with safety checks
            if (camera && controls) {
                camera.position.set(5, 3, 5);
                controls.target.set(0, 0.5, 0);
                controls.update();
            }
        }

        // Basic car creation
        function createBasicCar(type, color, plate) {
            const group = new THREE.Group();

            // Body dimensions based on type
            const dimensions = {
                sedan: { width: 2, height: 1.4, length: 4 },
                suv: { width: 2.2, height: 1.8, length: 4.5 },
                truck: { width: 2.5, height: 2.2, length: 6 }
                //Add if there will be more vehicle that we include, I'm still thinking
            }[type];

            // Main body
            const bodyGeometry = new THREE.BoxGeometry(
                dimensions.width,
                dimensions.height,
                dimensions.length
            );
            const bodyMaterial = new THREE.MeshPhysicalMaterial({
                color: color,
                metalness: 0.3,
                roughness: 0.4
            });
            const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
            group.add(body);

            // Wheels
            const wheelGeometry = new THREE.CylinderGeometry(0.3, 0.3, 0.2, 16);
            const wheelMaterial = new THREE.MeshStandardMaterial({ color: 0x333333 });

            [-1, 1].forEach(x => {
                [-1.5, 1.5].forEach(z => {
                    const wheel = new THREE.Mesh(wheelGeometry, wheelMaterial);
                    wheel.rotation.z = Math.PI / 2;
                    wheel.position.set(x * dimensions.width/2, -0.6, z);
                    group.add(wheel);
                });
            });

            // License plate
            const plateTexture = new THREE.CanvasTexture(createLicensePlateTexture(plate));
            const plateMaterial = new THREE.MeshBasicMaterial({ map: plateTexture });
            const plateMesh = new THREE.Mesh(
                new THREE.PlaneGeometry(1, 0.3),
                plateMaterial
            );
            plateMesh.position.set(0, -0.3, -dimensions.length/2 + 0.2);
            plateMesh.rotation.x = -Math.PI / 2;
            group.add(plateMesh);

            return group;
        }

        // License plate texture generator
        function createLicensePlateTexture(text) {
            const canvas = document.createElement('canvas');
            canvas.width = 512;
            canvas.height = 154;
            const ctx = canvas.getContext('2d');

            // Background
            ctx.fillStyle = '#ffffff';
            ctx.fillRect(0, 0, 512, 154);

            // Text
            ctx.fillStyle = '#000000';
            ctx.font = 'bold 64px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(text.toUpperCase(), 256, 77);

            return canvas;
        }

        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }

        // Utility function
        function debounce(func, wait) {
            let timeout;
            return (...args) => {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        window.carPreviewInitialized = carPreviewInitialized;
        window.currentCarData = currentCarData;
        window.cleanupCarPreview = cleanupCarPreview;
        window.setupInputListeners = setupInputListeners;
        renderer = new THREE.WebGLRenderer({ antialias: true })
        window.initCarPreview = initCarPreview;
        window.updateCarModel = updateCarModel;
        window.onWindowResize = onWindowResize;
        window.debounce = debounce;
        window.renderer = renderer;
    </script>

    <script src="~/js/vehicleregister.js" defer></script>
    <script src="~/js/notification-staff.js"></script>
}

<div class="flex flex-row overflow-hidden pt-2 flex-shrink-0">
    <!-- Sidebar -->
    <div class="sidebar bg-white rounded-tr-2xl rounded-br-2xl shadow-xl w-64 flex flex-col">
        <!-- Sidebar Header -->
        <div class="px-2 py-2 border-b border-gray-100">
            <h2 class="text-xl font-bold text-blue-600 text-center">Staff Panel</h2>
        </div>

        <!-- Navigation Links -->
        <ul class="flex-1 px-2 py-2 space-y-2">
            <li class="nav-item">
                <a href="/staff/dashboard" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Dashboard" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-home w-5 h-5 mr-3"></i>
                    <span class="font-medium">Dashboard</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/pass/visitors" style="text-decoration: none;"
                   class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"]?.ToString() == "VisitorsPass" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-tasks w-5 h-5 mr-3"></i>
                    <span class="font-medium">Visitors Pass</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/vehicle/registration" style="text-decoration: none;"
                   class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"]?.ToString() == "VehicleRegistration" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-chart-line w-5 h-5 mr-3"></i>
                    <span class="font-medium">Vehicle Registration</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/requests/reservation" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "ReservationRequests" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-bell w-5 h-5 mr-3"></i>
                    <span class="font-medium">Reservation Requests</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/requests/services" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "ServiceRequests" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-tools w-6"></i>
                    <span class="font-medium">Service Requests</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/bills_and_payments" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "BillsAndPayments" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-file-invoice-dollar w-6"></i>
                    <span class="font-medium">Bills & Payments</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/poll_management" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Poll" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-poll w-6"></i>
                    <span class="font-medium">Poll Management</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/event_management" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Event" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-calendar-check w-6"></i>
                    <span class="font-medium">Event Management</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/feedbacks" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Feedback" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-comment-alt w-6"></i>
                    <span class="font-medium">Feedbacks</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/reports" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Reports" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-chart-line w-5 h-5 mr-3"></i>
                    <span class="font-medium">Reports</span>
                </a>
            </li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="flex-1 p-4 overflow-y-auto fade-in">
         <div class="container">
            <div class="flex items-center mx-auto text-lg space-x-2 w-full bg-white text-[#1E3A8A] p-3 rounded-xl shadow-md relative group">
                <h1 class="text-2xl font-bold mb-2 text-blue-900"><i class="fas fa-chart-line w-5 h-5 mr-3"></i> Vehicle Registration</h1>
            </div>
            <h2 class="text-2xl font-bold mb-4"></h2>

            <div class="flex justify-between items-center mb-4">
                <!-- Add Vehicle Button -->
                <button class="bg-blue-600 text-white px-4 py-2 rounded" onclick="showAddModal()">Add Vehicle</button>

                <!-- Filter Section -->
                <div class="flex items-center space-x-4">
                    <h3 class="text-lg">Filter: </h3>

                    <!-- Filter Buttons -->
                    <div id="activeButton" class="bg-blue-700 text-white px-4 py-2 rounded cursor-pointer inline-block" onclick="filterByStatus('Active')">
                        Active
                    </div>
                    <div id="inactiveButton" class="bg-blue-400 text-white px-4 py-2 rounded cursor-pointer inline-block" onclick="filterByStatus('Inactive')">
                        Inactive
                    </div>
                </div>
            </div>

            <input type="text" id="searchInput" class="border p-2 mb-4 w-full" placeholder="Search Vehicle Registered..." onkeyup="filterTable()">

            <table class="w-full border" id="vehicleTable">
                <thead class="bg-blue-800 text-white">
                    <tr>
                        <th class="p-2 text-center">PLATE NO.</th>
                        <th class="p-2 text-center">TYPE</th>
                        <th class="p-2 text-center">COLOR</th>
                        <th class="p-2 text-center">BRAND</th>
                        <th class="p-2 text-center">STATUS</th>
                        <th class="p-2 text-center">ACTION</th>
                    </tr>
                </thead>
                <tbody id="vehicleTableBody">
                    <!-- Rows will be populated by JavaScript -->
                </tbody>
            </table>

            <!-- Add/Edit Modal -->
            <div id="vehicleModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4">
                <div class="bg-white p-2 rounded-xl w-full max-w-2xl relative">
                    <h3 class="text-2xl font-bold mb-4 text-gray-800" id="modalTitle">Add Vehicle</h3>
                    <form id="vehicleForm" class="space-y-4">
                        <input type="hidden" id="vehicleId" />
                        <div class="form-grid">
                            <div class="input-group">
                                <label>Vehicle Type</label>
                                <select id="type" class="input-field">
                                    <option value="sedan">Sedan</option>
                                    <option value="suv">SUV</option>
                                    <option value="truck">Truck</option>
                                </select>
                            </div>
                            <div class="input-group">
                                <label>Vehicle Color</label>
                                <input type="color" id="color" value="#ffffff">
                            </div>
                            <div class="input-group">
                                <label>Vehicle Brand Name</label>
                                <input type="text" id="vehicleBrand" placeholder="Enter the Vehicle Brand Name">
                            </div>
                            <div class="input-group">
                                <label>Plate Number</label>
                                <input type="text" id="plateNumber" placeholder="ABC-123">
                            </div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Select Associated Homeowner</label>
                            <div class="relative">
                                <input type="text"
                                       id="homeownerSearch"
                                       class="w-full px-4 py-2.5 rounded-lg border border-gray-200 focus:ring-2 focus:ring-blue-500 outline-none transition-all"
                                       placeholder="Search homeowners..."
                                       oninput="filterHomeowners()">
                                <div id="homeownerList"
                                     class="hidden w-full mt-2 bg-white border border-gray-200 rounded-lg shadow-sm overflow-y-auto" style="max-height: 120px">
                                    <!-- Homeowners will be loaded here -->
                                </div>
                            </div>
                        </div>

                        <!-- Selected Homeowner -->
                        <input type="hidden" id="selectedUserId">
                        <div class="bg-blue-50 p-2 rounded-lg">
                            <p class="text-sm text-gray-600 mb-1">Selected Homeowner:</p>
                            <p id="selectedHomeownerName" class="font-medium text-blue-700">None selected</p>
                        </div>

                        <!-- 3D Preview Container -->
                        <div id="carPreview" style="height: 180px; border: 2px solid #e2e8f0; border-radius: 8px;"></div>

                        <div class="mt-6 flex justify-end space-x-3">
                            <button type="button" onclick="saveVehicle()"
                                    class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors">
                                Save Changes
                            </button>
                            <button type="button" onclick="closeModal()"
                                    class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-2 rounded-lg transition-colors">
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Delete Confirmation -->
            <div id="deleteConfirm" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
                <div class="bg-white p-6 rounded">
                    <p>Are you sure you want to delete this vehicle?</p>
                    <div class="mt-4 space-x-4 text-right">
                        <button onclick="deleteVehicleConfirmed()" class="bg-red-600 text-white px-4 py-2 rounded">Delete</button>
                        <button onclick="closeDeleteConfirm()" class="bg-gray-300 px-4 py-2 rounded">Cancel</button>
                    </div>
                </div>
            </div>

            <!-- Activate Confirmation -->
            <div id="activateConfirm" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
                <div class="bg-white p-6 rounded">
                    <p>Are you sure you want to activate this vehicle?</p>
                    <div class="mt-4 space-x-4 text-right">
                        <button onclick="activateVehicleConfirmed()" class="bg-green-600 text-white px-4 py-2 rounded">Activate</button>
                        <button onclick="closeActivateConfirm()" class="bg-gray-300 px-4 py-2 rounded">Cancel</button>
                    </div>
                </div>
            </div>
          </div>
    </div>
</div>