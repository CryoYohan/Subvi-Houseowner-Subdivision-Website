@{
    Layout = "_StaffLayout";
    ViewData["Title"] = "Staff | Visitor Pass";
}

<link rel="stylesheet" href="~/css/visitorpass.css" />

<div class="flex flex-row overflow-hidden pt-2 flex-shrink-0">
    <!-- Sidebar -->
    <div class="sidebar bg-white rounded-tr-2xl rounded-br-2xl shadow-xl w-64 h-screen flex flex-col">
        <!-- Sidebar Header -->
        <div class="px-6 py-8 border-b border-gray-100">
            <h2 class="text-xl font-bold text-blue-600 text-center">Staff Panel</h2>
        </div>

        <!-- Navigation Links -->
        <ul class="flex-1 px-4 py-6 space-y-2">
            <li class="nav-item">
                <a href="/staff/dashboard" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Dashboard" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-home w-5 h-5 mr-3"></i>
                    <span class="font-medium">Dashboard</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/pass/visitors" style="text-decoration: none;"
                   class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"]?.ToString() == "VisitorsPass" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-tasks w-5 h-5 mr-3"></i>
                    <span class="font-medium">Visitors Pass</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/vehicle/registration" style="text-decoration: none;"
                   class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"]?.ToString() == "VehicleRegistration" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-chart-line w-5 h-5 mr-3"></i>
                    <span class="font-medium">Vehicle Registration</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/requests/reservation" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "ReservationRequests" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-bell w-5 h-5 mr-3"></i>
                    <span class="font-medium">Reservation Requests</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/requests/services" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "ServiceRequests" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-tools w-6"></i>
                    <span class="font-medium">Service Requests</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/poll_management" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "BillsAndPayments" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-poll w-6"></i>
                    <span class="font-medium">Poll Management</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/bills_and_payments" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Poll" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-file-invoice-dollar w-6"></i>
                    <span class="font-medium">Bills & Payments</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/reports" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Reports" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-chart-line w-5 h-5 mr-3"></i>
                    <span class="font-medium">Reports</span>
                </a>
            </li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="flex-1 overflow-y-auto bg-gray-50">
        <div class="p-4">
            <!-- Header Section -->
            <div class="flex items-center mx-auto text-lg space-x-2 mb-4 w-full bg-white text-[#1E3A8A] p-3 rounded-xl shadow-md relative group">
                <h1 class="text-2xl font-bold mb-2 text-blue-900"><i class="fas fa-tasks w-5 h-5 mr-3"></i> Visitor Management</h1>
            </div>
            <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-2">
                <div class="sm:mb-0">
                    <p class="text-gray-600 mt-1">Manage and track all visitor entries</p>
                </div>
                <button onclick="openAddModal()"
                        class="bg-gradient-to-r from-blue-600 to-blue-500 text-white px-2 py-2 rounded-lg shadow-sm hover:shadow-md transition-all flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    Add Visitor
                </button>
            </div>

            <!-- Filter Controls -->
            <div class="flex flex-wrap gap-3">
                <button id="activeButton" onclick="fetchVisitors('Active')" class="filter-btn font-semibold active">
                    Active Visitors
                </button>
                <button id="archivedButton" onclick="fetchVisitors('Deleted')" class="filter-btn font-semibold">
                    Archived
                </button>
                <button id="restrictedButton" onclick="fetchVisitors('Prohibited')" class="filter-btn font-semibold">
                    Restricted
                </button>
            </div>

            <!-- Search Bar -->
            <div class="relative mb-6 p-2">
                <input type="text"
                       placeholder="Search visitors..."
                       oninput="searchVisitors(this.value)"
                       class="w-full px-4 py-2.5 rounded-lg border border-gray-200 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-all">
                <svg class="absolute right-3 top-3.5 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
            </div>

            <!-- Visitor Table -->
            <div class="bg-white rounded-xl shadow-sm overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-4 text-left text-sm text-center font-semibold text-gray-700">Visitor Name</th>
                                <th class="px-6 py-4 text-left text-sm text-center font-semibold text-gray-700">Date Created</th>
                                <th class="px-6 py-4 text-left text-sm text-center font-semibold text-gray-700">Homeowner Name</th>
                                <th class="px-6 py-4 text-left text-sm text-center font-semibold text-gray-700">Relationship</th>
                                <th class="px-6 py-4 text-left text-sm text-center font-semibold text-gray-700">Status</th>
                                <th class="px-6 py-4 text-right text-sm text-center font-semibold text-gray-700">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-100" id="visitorTable">
                            <!-- Data will be populated here -->
                        </tbody>
                    </table>
                </div>

                <!-- Loading State -->
                <div id="loadingState" class="p-8 text-center">
                    <div class="animate-spin inline-block w-8 h-8 border-4 border-blue-500 rounded-full border-t-transparent"></div>
                    <p class="mt-3 text-gray-600">Loading visitors...</p>
                </div>

                <!-- Empty State -->
                <div id="emptyState" class="hidden p-8 text-center">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">No visitors found</h3>
                </div>
            </div>
        </div>

        <!-- Add/Edit Modal -->
        <div class="modal fade" id="visitorModal" tabindex="-1" aria-labelledby="visitorModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <!-- Modal Header -->
                    <div class="flex justify-between items-center p-4 border-b">
                        <h3 class="text-xl font-semibold">Visitor Details</h3>
                        <button onclick="closeModal()" class="text-gray-500 hover:text-gray-700">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>

                    <!-- Modal Body -->
                    <div class="p-3 space-y-5">
                        <input type="hidden" id="visitorId">

                        <!-- Homeowner Search -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Select Associated Homeowner</label>
                            <div class="relative">
                                <input type="text"
                                       id="homeownerSearch"
                                       class="w-full px-4 py-2.5 rounded-lg border border-gray-200 focus:ring-2 focus:ring-blue-500 outline-none transition-all"
                                       placeholder="Search homeowners..."
                                       oninput="filterHomeowners()">
                                <div id="homeownerList"
                                     class="hidden w-full mt-2 bg-white border border-gray-200 rounded-lg shadow-sm overflow-y-auto" style="max-height: 150px">
                                    <!-- Homeowners will be loaded here -->
                                </div>
                            </div>
                        </div>

                        <!-- Selected Homeowner -->
                        <input type="hidden" id="selectedUserId">
                        <div class="bg-blue-50 p-2 rounded-lg">
                            <p class="text-sm text-gray-600 mb-1">Selected Homeowner:</p>
                            <p id="selectedHomeownerName" class="font-medium text-blue-700">None selected</p>
                        </div>

                        <!-- Form Fields -->
                        <div class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Visitor Name</label>
                                <input type="text"
                                       id="visitorName"
                                       class="w-full px-4 py-2.5 rounded-lg border border-gray-200 focus:ring-2 focus:ring-blue-500 outline-none transition-all">
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Relationship</label>
                                <input type="text"
                                       id="relationship"
                                       class="w-full px-4 py-2.5 rounded-lg border border-gray-200 focus:ring-2 focus:ring-blue-500 outline-none transition-all">
                            </div>
                        </div>
                    </div>

                    <!-- Modal Footer -->
                    <div class="flex justify-end gap-3 p-6 border-t">
                        <button onclick="closeModal()"
                                class="px-5 py-2.5 text-gray-700 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                            Cancel
                        </button>
                        <button onclick="saveVisitor()"
                                class="px-5 py-2.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                            Save Visitor
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let homeowners = [];
    let selectedHomeownerId = null;

    function fetchVisitors(status) {
        // Remove the 'active' class from all buttons
        document.getElementById('activeButton').classList.remove('active');
        document.getElementById('archivedButton').classList.remove('active');
        document.getElementById('restrictedButton').classList.remove('active');

        // Add 'active' class to the clicked button
        if (status === 'Active') {
            document.getElementById('activeButton').classList.add('active');
            fetchVisitorsData('Active')
        } else if (status === 'Deleted') {
            document.getElementById('archivedButton').classList.add('active');
            fetchVisitorsData('Deleted')
        } else if (status === 'Prohibited') {
            document.getElementById('restrictedButton').classList.add('active');
            fetchVisitorsData('Prohibited')
        }
    }

    async function fetchVisitorsData(status) {
        try {
            const response = await fetch(`/staff/getvisitors?status=${status}`);
            const data = await response.json();
            renderVisitors(data, status);
        } catch (error) {
            console.error('Error fetching visitors:', error);
        }
    }

    // Load homeowners on modal open
    async function loadHomeowners() {
        try {
            const response = await fetch('/staff/gethomeowners');
            homeowners = await response.json();
            renderHomeowners(homeowners);
        } catch (error) {
            console.error('Error fetching homeowners:', error);
        }
    }

    // Render homeowners list
    function renderHomeowners(data) {
        const list = document.getElementById('homeownerList');
        list.innerHTML = data.length ? data.map(user => `
            <div onclick="selectHomeowner(${user.userId}, '${user.firstName} ${user.lastName}')"
                class="px-4 py-2 cursor-pointer ${
                    selectedHomeownerId === user.userId ? 'bg-blue-100' : 'hover:bg-gray-50'
                } rounded-md">
                <span class="font-medium">${user.firstName} ${user.lastName}</span>
                <span class="text-gray-500 text-sm block">${user.email}</span>
            </div>
        `).join('') : '<div class="text-gray-500 p-4">No homeowners found</div>';
        list.classList.remove('hidden');
    }

    // Filter homeowners on input
    function filterHomeowners() {
        const query = document.getElementById('homeownerSearch').value.toLowerCase();
        const filtered = homeowners.filter(user => {
            const fullName = `${user.firstName} ${user.lastName}`.toLowerCase();
            return user.firstName.toLowerCase().includes(query) ||
                   user.lastName.toLowerCase().includes(query) ||
                   fullName.includes(query);
        });
        renderHomeowners(filtered);
    }

    // Select a homeowner
    function selectHomeowner(userId, fullName) {
        selectedHomeownerId = userId; // Update selected
        document.getElementById('selectedUserId').value = userId;
        document.getElementById('selectedHomeownerName').innerText = fullName;
        document.getElementById('homeownerSearch').value = ''; 
        renderHomeowners(homeowners); // Re-render to highlight
    }

    // Open modal (Add mode)
    function openAddModal() {
        document.getElementById('visitorId').value = '';
        document.getElementById('selectedUserId').value = '';
        document.getElementById('selectedHomeownerName').value = '';
        document.getElementById('visitorName').value = '';
        document.getElementById('relationship').value = '';

        loadHomeowners();
        const modal = new bootstrap.Modal(document.getElementById('visitorModal'));
        modal.show();
    }

    // Open modal (Edit mode)
    async function openEditModal(visitorId) {
        const response = await fetch(`/staff/getvisitor/${visitorId}`);
        const visitor = await response.json();

        document.getElementById('visitorId').value = visitor.visitorId;
        document.getElementById('selectedUserId').value = visitor.userId;
        document.getElementById('selectedHomeownerName').textContent = visitor.homeownerName;
        document.getElementById('visitorName').value = visitor.visitorName;
        document.getElementById('relationship').value = visitor.relationship;
        selectedHomeownerId = visitor.userId;
        renderHomeowners(visitor);

        await loadHomeowners();
        const modal = new bootstrap.Modal(document.getElementById('visitorModal'));
        modal.show();
    }

    function closeModal() {
        const modalElement = document.getElementById('visitorModal');
        document.getElementById('homeownerSearch').value = '';
        selectedHomeownerId = null;
        document.getElementById('selectedHomeownerName').textContent = null;
        const modalInstance = bootstrap.Modal.getInstance(modalElement);
        if (modalInstance) {
            modalInstance.hide();
        }
    }

    // Save visitor (Add or Edit)
    async function saveVisitor() {
        const visitorId = document.getElementById('visitorId').value;
        const userId = document.getElementById('selectedUserId').value;
        const visitorName = document.getElementById('visitorName').value;
        const relationship = document.getElementById('relationship').value;

        if (!userId) {
            Swal.fire('Error', 'Please select a homeowner.', 'error');
            return;
        }

    const formData = new FormData();
        if (visitorId) formData.append('visitorId', visitorId);
        formData.append('userId', userId);
        formData.append('visitorName', visitorName);
        formData.append('relationship', relationship);

        const url = visitorId ? '/staff/editvisitor' : '/staff/addvisitor';

        const response = await fetch(url, {
            method: 'POST',
            body: formData
        });

        const result = await response.json();
        if (result.success) {
            Swal.fire('Success', visitorId ? 'Visitor updated successfully!' : 'Visitor added successfully!', 'success');
            bootstrap.Modal.getInstance(document.getElementById('visitorModal')).hide();
            document.getElementById('homeownerSearch').value = '';
            selectedHomeownerId = null;
            document.getElementById('selectedHomeownerName').textContent = null;
            fetchVisitors('Active');
        } else {
            Swal.fire('Error', result.message, 'error');
        }
    }

    function formatDateTime(dateTimeString) {
        const date = new Date(dateTimeString);
        const options = {
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
        };

        const formattedDate = date.toLocaleDateString('en-US', options);
        const formattedTime = date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true });

        return `${formattedDate} at ${formattedTime}`;
    }

    function renderVisitors(data, status) {
        const tableBody = document.querySelector('#visitorTable');
        const loading = document.getElementById('loadingState');
        const empty = document.getElementById('emptyState');

        loading.classList.add('hidden');
        tableBody.innerHTML = '';

        if (!data.length) {
            empty.classList.remove('hidden');
            return;
        }

        empty.classList.add('hidden');
        data.forEach(visitor => {
            const row = `
                <tr>
                    <td class="px-6 py-4 text-center font-medium text-gray-900">${visitor.visitorName}</td>
                    <td class="px-6 py-4 text-center text-gray-600">${formatDateTime(visitor.dateTime)}</td>
                    <td class="px-6 py-4 text-center text-gray-600">${visitor.fullName}</td>
                    <td class="px-6 py-4 text-center text-gray-600">
                        ${visitor.relationship.length > 21 ? visitor.relationship.slice(0, 21) + '...' : visitor.relationship}
                    </td>
                    <td class="px-6 py-4 text-center">
                        <span class="status-badge ${visitor.status}">${visitor.status}</span>
                    </td>
                    <td class="px-6 py-4 text-center space-x-2">
                        <button
                            onclick="openEditModal(${visitor.visitorId})"
                            class="text-blue-600 hover:text-blue-800 transition-colors"
                        >
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"/>
                            </svg>
                        </button>
                        <button
                            onclick="confirmDelete('${visitor.visitorId}','${visitor.visitorName}', '${visitor.fullName}')"
                            class="text-red-600 hover:text-red-800 transition-colors"
                        >
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                            </svg>
                        </button>
                    </td>
                </tr>
            `;
            tableBody.innerHTML += row;
        });
    }

    // Confirm Delete
        function confirmDelete(visitorId, visitorname, homeownername) {
        Swal.fire({
            title: 'Are you sure you want to delete?',
            text: `The visitor name ${visitorname} associated with homeowner ${homeownername}?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, delete it!'
        }).then(async (result) => {
            if (result.isConfirmed) {
                const response = await fetch(`/staff/deletevisitor/${visitorId}`, { method: 'POST' });
                const data = await response.json();
                if (data.success) {
                    Swal.fire('Deleted!', 'Visitor has been deleted Successfully.', 'success');
                    fetchVisitors('Active');
                } else {
                    Swal.fire('Error!', 'Something went worng. Failed to delete the visitor.', 'error');
                }
            }
        });
    }

    // Filter search results
    function searchVisitors(query) {
        const rows = document.querySelectorAll('#visitorTable tr');
        query = query.toLowerCase();

        rows.forEach(row => {
            const visitorName = row.cells[0].textContent.toLowerCase();
            row.style.display = visitorName.includes(query) ? '' : 'none';
        });
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
        fetchVisitors('Active');  // Load active visitors on page load
    });
</script>