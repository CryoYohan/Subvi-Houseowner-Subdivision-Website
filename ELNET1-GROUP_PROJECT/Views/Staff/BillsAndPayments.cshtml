@{
    Layout = "_StaffLayout";
    ViewData["Title"] = "Staff | Bills and Payments";
}

<div class="flex flex-row overflow-hidden pt-2 flex-shrink-0">
    <!-- Sidebar -->
    <div class="sidebar bg-white rounded-tr-2xl rounded-br-2xl shadow-xl w-64 h-screen flex flex-col">
        <!-- Sidebar Header -->
        <div class="px-6 py-8 border-b border-gray-100">
            <h2 class="text-xl font-bold text-blue-600 text-center">Staff Panel</h2>
        </div>

        <!-- Navigation Links -->
        <ul class="flex-1 px-4 py-6 space-y-2">
            <li class="nav-item">
                <a href="/staff/dashboard" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Dashboard" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-home w-5 h-5 mr-3"></i>
                    <span class="font-medium">Dashboard</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/pass/visitors" style="text-decoration: none;"
                   class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"]?.ToString() == "VisitorsPass" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-tasks w-5 h-5 mr-3"></i>
                    <span class="font-medium">Visitors Pass</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/vehicle/registration" style="text-decoration: none;"
                   class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"]?.ToString() == "VehicleRegistration" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-chart-line w-5 h-5 mr-3"></i>
                    <span class="font-medium">Vehicle Registration</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/requests/reservation" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "ReservationRequests" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-bell w-5 h-5 mr-3"></i>
                    <span class="font-medium">Reservation Requests</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/requests/services" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "ServiceRequests" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-tools w-6"></i>
                    <span class="font-medium">Service Requests</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/bills_and_payments" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "BillsAndPayments" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-file-invoice-dollar w-6"></i>
                    <span class="font-medium">Bills & Payments</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/reports" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Reports" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-chart-line w-5 h-5 mr-3"></i>
                    <span class="font-medium">Reports</span>
                </a>
            </li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="flex-1 p-2 w-full overflow-y-auto fade-in">
        <div class="container">
            <div class="mx-autospace-x-1 mb-4 w-full bg-white text-[#1E3A8A] p-3 rounded-xl shadow-md">
                <h1 class="text-2xl font-bold mb-2 text-blue-900"><i class="fas fa-file-invoice-dollar w-6"></i> Bill & Payments</h1>
            </div>

            <!-- Search -->
            <div class="mb-4">
                <input type="text"
                       id="searchInput"
                       placeholder="Search by Bill Name..."
                       class="w-full p-2 border border-gray-300 rounded shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                       oninput="filterBills()" />
            </div>

            <!-- Table -->
            <table class="w-full border shadow-lg rounded overflow-hidden" id="billTable">
                <thead class="bg-blue-800 text-white">
                    <tr>
                        <th class="p-3 text-left">BILL NAME</th>
                        <th class="p-3 text-center">DUE DATE</th>
                        <th class="p-3 text-center">STATUS</th>
                        <th class="p-3 text-right">BILL AMOUNT</th>
                    </tr>
                </thead>
                <tbody id="billTableBody">
                    <!-- Rows injected via JS -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
   let allBills = []; 
   let selectedRow = null;

    async function fetchBills() {
      try {
        const response = await fetch('/staff/bills/data'); // adjust to your backend route
        const data = await response.json();
        allBills = data;
        renderBills(data);
      } catch (error) {
        console.error("Error fetching bills:", error);
      }
    }

    function renderBills(bills) {
      const tableBody = document.getElementById('billTableBody');
      tableBody.innerHTML = "";

      bills.forEach(bill => {
        const displayStatus = bill.status === 'Paid' ? 'Fully Paid' : 'Not Fully Paid';
        const row = document.createElement("tr");
        row.classList.add("hover:bg-gray-100", "cursor-pointer");

        row.innerHTML = `
          <td class="p-3">${bill.billName}</td>
          <td class="p-3 text-center">${new Date(bill.dueDate).toLocaleDateString('en-US')}</td>
          <td class="p-3 text-center">${displayStatus}</td>
          <td class="p-3 text-right">₱ ${parseFloat(bill.billAmount).toFixed(2)}</td>
        `;

        // Click event to toggle dropdown and highlight
        row.addEventListener("click", () => {
          if (selectedRow) selectedRow.classList.remove("bg-blue-100");
          if (selectedRow === row) {
            selectedRow = null; // Unselect if clicked again
          } else {
            row.classList.add("bg-blue-100");
            selectedRow = row;
          }

          toggleDropdown(bill.billId, row, bill.status);
        });

        tableBody.appendChild(row);
      });
    }

    async function toggleDropdown(billId, clickedRow, status) {
        const existingDropdown = clickedRow.nextElementSibling;
        if (existingDropdown && existingDropdown.classList.contains("payment-dropdown")) {
            existingDropdown.remove();
            return;
        }

        // Remove any other open dropdowns
        document.querySelectorAll(".payment-dropdown").forEach(e => e.remove());

        try {
            // Fetch payment data for the billId
            const res = await fetch(`/staff/payments/by-bill/${billId}`);
            const data = await res.json();

            // Check if data is valid and contains payments
            const payments = data.payments || [];
            const totalAmountPaid = data.totalAmountPaid || 0;

            // Determine the background color for the payment status (Fully Paid or Not Fully Paid)
            const paymentStatusClass = status === 'Paid' ? 'bg-green-600' : 'bg-red-600';
            const paymentStatusText = status === 'Paid' ? 'Fully Paid' : 'Not Fully Paid';
            console.log(status)

            const dropdownRow = document.createElement("tr");
            dropdownRow.className = "payment-dropdown";
            dropdownRow.innerHTML = `
              <td colspan="4" class="p-4 bg-gray-50 animate-slideDown">
                <div class="flex justify-between items-center">
                    <h4 class="font-semibold text-blue-700 mb-2">Payment History
                        <span class="ml-2 text-white px-2 py-1 rounded ${paymentStatusClass}">${paymentStatusText}</span>
                    </h4>
                    <p class="font-semibold text-base">Total Paid: ₱ ${parseFloat(totalAmountPaid).toFixed(2)}</p>
                </div>
                ${payments.length > 0
                  ? `
                    <table class="w-full text-sm border">
                       <thead >
                         <tr class="${status === 'Paid' ? 'bg-green-600 text-white' : 'bg-red-600 text-white'}">
                          <th class="p-2 text-center">AMOUNT</th>
                          <th class="p-2 text-center">PAYMENT METHOD</th>
                          <th class="p-2 text-center">DATE PAID</th>
                        </tr>
                      </thead>
                      <tbody>
                        ${payments.map(p => `
                          <tr class="border-t">
                            <td class="p-2 text-center">₱ ${parseFloat(p.amountPaid).toFixed(2)}</td>
                            <td class="p-2 text-center">${p.paymentMethod}</td>
                            <td class="p-3 text-center">${new Date(p.datePaid).toLocaleDateString('en-US')}</td>
                          </tr>`).join('')}
                      </tbody>
                    </table>`
                  : `<p class="text-gray-500 italic">No payment history found.</p>`
                }
              </td>
            `;

            clickedRow.parentNode.insertBefore(dropdownRow, clickedRow.nextSibling);
        } catch (error) {
            console.error("Error fetching payment data:", error);
            // You can add some error handling UI here, such as showing an error message
        }
    }

    function filterBills() {
      const keyword = document.getElementById("searchInput").value.toLowerCase();
      const filtered = allBills.filter(b =>
        b.billName.toLowerCase().includes(keyword)
      );
      renderBills(filtered);
    }

    document.addEventListener("DOMContentLoaded", fetchBills);
</script>