@{
    Layout = "_StaffLayout";
    ViewData["Title"] = "Staff | Bills and Payments";
}

<div class="flex flex-row overflow-hidden pt-2 flex-shrink-0">
    <!-- Sidebar -->
    <div class="sidebar bg-white rounded-tr-2xl rounded-br-2xl shadow-xl w-64 h-screen flex flex-col">
        <!-- Sidebar Header -->
        <div class="px-6 py-8 border-b border-gray-100">
            <h2 class="text-xl font-bold text-blue-600 text-center">Staff Panel</h2>
        </div>

        <!-- Navigation Links -->
        <ul class="flex-1 px-4 py-6 space-y-2">
            <li class="nav-item">
                <a href="/staff/dashboard" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Dashboard" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-home w-5 h-5 mr-3"></i>
                    <span class="font-medium">Dashboard</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/pass/visitors" style="text-decoration: none;"
                   class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"]?.ToString() == "VisitorsPass" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-tasks w-5 h-5 mr-3"></i>
                    <span class="font-medium">Visitors Pass</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/vehicle/registration" style="text-decoration: none;"
                   class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"]?.ToString() == "VehicleRegistration" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-chart-line w-5 h-5 mr-3"></i>
                    <span class="font-medium">Vehicle Registration</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/requests/reservation" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "ReservationRequests" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-bell w-5 h-5 mr-3"></i>
                    <span class="font-medium">Reservation Requests</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/requests/services" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "ServiceRequests" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-tools w-6"></i>
                    <span class="font-medium">Service Requests</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/bills_and_payments" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "BillsAndPayments" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-file-invoice-dollar w-6"></i>
                    <span class="font-medium">Bills & Payments</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/poll_management" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Poll" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-poll w-6"></i>
                    <span class="font-medium">Poll Management</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/staff/reports" style="text-decoration: none;" class="flex items-center px-4 py-3 rounded-lg text-gray-600 hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 @(ViewContext.RouteData.Values["Action"].ToString() == "Reports" ? "bg-blue-50 text-blue-600" : "")">
                    <i class="fas fa-chart-line w-5 h-5 mr-3"></i>
                    <span class="font-medium">Reports</span>
                </a>
            </li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="flex-1 p-2 w-full overflow-y-auto fade-in">
        <div class="container">
            <div class="mx-autospace-x-1 mb-4 w-full bg-white text-[#1E3A8A] p-3 rounded-xl shadow-md flex items-center justify-between">
                <h1 class="text-2xl font-bold text-blue-900 flex items-center">
                    <i class="fas fa-file-invoice-dollar mr-2"></i> Bill & Payments
                </h1>

                <!-- Panel Toggle Buttons -->
                <div class="space-x-2">
                    <button id="billsBtn" class="px-4 py-2 rounded-lg bg-blue-700 text-white font-medium transition-colors">Bills</button>
                    <button id="paymentsBtn" class="px-4 py-2 rounded-lg bg-gray-200 text-blue-900 font-medium transition-colors">Payments</button>
                </div>
            </div>

            <!-- Bills Panel -->
            <div id="billsPanel" class="container mt-4">
                <h2 class="text-center text-blue-900 fw-semibold mb-4">Bills</h2>

                <!-- Tabs + Add Button -->
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <ul class="nav nav-tabs" id="billStatusTabs">
                        <li class="nav-item font-bold">
                            <a class="nav-link active" data-status="Upcoming" href="#">Upcoming</a>
                        </li>
                        <li class="nav-item font-bold">
                            <a class="nav-link" data-status="Due Now" href="#">Due Now</a>
                        </li>
                        <li class="nav-item font-bold">
                            <a class="nav-link" data-status="Overdue" href="#">Overdue</a>
                        </li>
                    </ul>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addBillModal">
                        <i class="bi bi-plus-lg me-1"></i> Add Bill
                    </button>
                </div>

                <!-- Search -->
                <div class="mb-3">
                    <input type="text" id="billSearch" class="form-control" placeholder="Search bills...">
                </div>

                <!-- Table -->
                <div class="table-responsive">
                    <table class="w-full border shadow-lg rounded overflow-hidden">
                        <thead class="bg-blue-800 text-white">
                            <tr class="text-center">
                                <th class="text-center p-2">BILL NAME</th>
                                <th class="text-center p-2">DUE DATE</th>
                                <th class="text-center p-2">STATUS</th>
                                <th class="text-center p-2">AMOUNT</th>
                                <th class="text-center p-2">BILLER FULL NAME</th>
                                <th class="text-center p-2">ACTIONS</th>
                            </tr>
                        </thead>
                        <tbody id="billsTableBody">
                            <!-- Dynamic Rows -->
                        </tbody>
                    </table>
                </div>

                <!-- Modals -->
                <!-- Add Bill Modal -->
                <div class="modal fade" id="addBillModal" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <form id="addBillForm">
                                <div class="modal-header">
                                    <h5 class="modal-title">Add Bill</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="mb-2">
                                        <label class="form-label">Bill Name</label>
                                        <input type="text" name="billName" class="form-control" required>
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Due Date</label>
                                        <input type="date" name="dueDate" class="form-control" id="addDueDate" required>
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Bill Amount</label>
                                        <input type="number" name="billAmount" class="form-control" step="0.01" required>
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Search Homeowner</label>
                                        <input type="text" id="homeownerSearch" class="form-control" placeholder="Search by name or email">
                                    </div>
                                    <div class="mb-2 border rounded" id="homeownerList" style="max-height: 150px; overflow-y: auto;"></div>
                                    <div class="mb-2">
                                        <label class="form-label">Selected Homeowner</label>
                                        <input type="text" id="selectedHomeowner" class="form-control" disabled>
                                        <input type="hidden" name="userId" id="selectedUserId">
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="submit" class="btn btn-primary">
                                        <span class="spinner-border spinner-border-sm d-none" role="status" id="addLoading"></span>
                                        Submit
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- Confirm Add Modal -->
                <div class="modal fade" id="confirmAddModal" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Confirm Add</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                Are you sure you want to add this bill?
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary" id="confirmAddBtn">Yes, Add</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Edit Bill Modal (populated dynamically) -->
                <div class="modal fade" id="editBillModal" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <form id="editBillForm">
                                <div class="modal-header">
                                    <h5 class="modal-title">Edit Bill</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <input type="hidden" name="billId">
                                    <div class="mb-2">
                                        <label class="form-label">Bill Name</label>
                                        <input type="text" name="billName" class="form-control" required>
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Due Date</label>
                                        <input type="date" name="dueDate" class="form-control" id="editDueDate" required>
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Bill Amount</label>
                                        <input type="number" name="billAmount" class="form-control" step="0.01" required>
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">Search Homeowner</label>
                                        <input type="text" id="editHomeownerSearch" class="form-control" placeholder="Search by name or email">
                                    </div>
                                    <div class="mb-2 border rounded" id="editHomeownerList" style="max-height: 150px; overflow-y: auto;"></div>
                                    <div class="mb-2">
                                        <label class="form-label">Selected Homeowner</label>
                                        <input type="text" id="editSelectedHomeowner" class="form-control" disabled>
                                        <input type="hidden" name="userId" id="editSelectedUserId">
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="submit" class="btn btn-warning">
                                        <span class="spinner-border spinner-border-sm d-none" role="status" id="editLoading"></span>
                                        Save
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- Confirmation Modal -->
                <div class="modal fade" id="confirmEditModal" style="background-color: cornflowerblue" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Confirm Update</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                Are you sure you want to save these changes?
                                <p>Remember that editing the bill also corresponds to the Biller's screen.</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-warning" id="confirmEditBtn">Yes, Update</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Confirm Delete Modal -->
                <div class="modal fade" id="confirmDeleteModal" style="background-color: salmon" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Confirm Deletion</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                Are you sure you want to delete this bill?
                                <p>Remember that deleting the bill also corresponds to the Biller's screen.</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Yes, Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Toast -->
            <div class="position-fixed top-0 end-0 p-3" style="z-index: 9999">
                <div id="toastContainer"></div>
            </div>

            <!-- Payments Panel -->
            <div id="paymentsPanel" class="hidden">
                <h2 class="text-center text-1xl text-blue-900 font-semibold mb-4">Payments</h2>

                <!-- Payment History Table -->
                <div id="paymenthistorypanel">
                    <!-- Search and Filter -->
                    <div class="mb-4 flex justify-between items-center">
                        <!-- Filter Buttons -->
                        <div class="space-x-4">
                            <button id="fullPaidButton" class="bg-blue-700 text-white px-4 py-2 rounded cursor-pointer" onclick="filterBillsByStatus('Paid')">Full Paid</button>
                            <button id="notPaidButton" class="bg-gray-400 text-white px-4 py-2 rounded cursor-pointer" onclick="filterBillsByStatus('Not Paid')">Not Fully Paid</button>
                        </div>

                        <!-- Search Input -->
                        <input type="text"
                               id="searchInput"
                               placeholder="Search by Bill Name..."
                               class="w-full sm:w-64 p-2 border border-gray-300 rounded shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                               oninput="filterBills()" />
                    </div>

                    <!-- Table -->
                    <table class="w-full border shadow-lg rounded overflow-hidden" id="billTable">
                        <thead class="bg-blue-800 text-white">
                            <tr>
                                <th class="p-3 text-left">BILLER FULL NAME</th>
                                <th class="p-3 text-center">BILL NAME</th>
                                <th class="p-3 text-center">DUE DATE</th>
                                <th class="p-3 text-center">STATUS</th>
                                <th class="p-3 text-right">BILL AMOUNT</th>
                            </tr>
                        </thead>
                        <tbody id="billTableBody">
                            <!-- Rows injected via JS -->
                        </tbody>
                    </table>
                </div>
            </div>
    </div>
</div>

    <style>
        .homeowner-item {
            padding: 10px;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

            .homeowner-item:hover {
                background-color: #f0f0f0;
            }

            .homeowner-item.selected {
                background-color: #d0ebff;
            }

        .homeowner-email {
            font-size: 0.85em;
            color: #6c757d;
        }
    </style>

<script>
        let homeowners = [];
        let AllhomeownersEdit = [];
        let selectedHomeownerId = null;
        let addFormData = null
        let editFormData = null;
        let billIdToDelete = null;
        let selectedStatus = '';

        document.addEventListener("DOMContentLoaded", () => {
          loadBills("Upcoming");
          const today = new Date().toISOString().split("T")[0];

          const addDueDateInput = document.getElementById("addDueDate");
          if (addDueDateInput) addDueDateInput.min = today;

          const editDueDateInput = document.getElementById("editDueDate");
          if (editDueDateInput) editDueDateInput.min = today;

          document.querySelectorAll("#billStatusTabs .nav-link").forEach(tab => {
            tab.addEventListener("click", e => {
              e.preventDefault();
              document.querySelector("#billStatusTabs .active").classList.remove("active");
              tab.classList.add("active");
              loadBills(tab.dataset.status);
            });
          });

          document.getElementById("billSearch").addEventListener("input", function () {
              const keyword = this.value.toLowerCase();
              const rows = document.querySelectorAll("#billsTableBody tr");
              let matchCount = 0;

              rows.forEach(row => {
                const isMatch = row.innerText.toLowerCase().includes(keyword);
                row.style.display = isMatch ? "" : "none";
                if (isMatch) matchCount++;
              });

              // Remove previous 'no results' row if it exists
              const existingMessageRow = document.getElementById("noResultsRow");
              if (existingMessageRow) existingMessageRow.remove();

              if (matchCount === 0) {
                const noDataRow = document.createElement("tr");
                noDataRow.id = "noResultsRow";
                noDataRow.innerHTML = `
                  <td colspan="6" class="text-center text-muted py-3">No matching bills found.</td>
                `;
                document.getElementById("billsTableBody").appendChild(noDataRow);
              }
            });
        });

        //Fetch data through filtering status
        function loadBills(status) {
          selectedStatus = status;
          fetch(`/staff/bills/get?status=${status}`)
            .then(res => res.json())
            .then(bills => {
              const tbody = document.getElementById("billsTableBody");
              tbody.innerHTML = "";

              if (bills.length === 0) {
                const row = document.createElement("tr");
                row.innerHTML = `
                  <td colspan="6" class="text-center text-muted py-3">No ${status} bills data found.</td>
                `;
                tbody.appendChild(row);
                return;
              }

              bills.forEach(bill => {
                const row = document.createElement("tr");
                row.innerHTML = `
                  <td class="text-center p-2">${bill.billName}</td>
                  <td class="text-center p-2">${new Date(bill.dueDate).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: '2-digit',
                      day: '2-digit'
                    })}</td>
                  <td class="text-center p-2"><span class="badge p-2 bg-${getStatusColor(bill.status)}">${bill.status}</span></td>
                  <td class="text-center p-2">₱${bill.billAmount.toFixed(2)}</td>
                  <td class="text-center p-2">${bill.fullName}</td>
                  <td class="text-center p-2">
                    <button class="btn btn-sm btn-warning me-1" onclick="showEditModal(${bill.billId})">Edit</button>
                    <button class="btn btn-sm btn-danger" onclick="confirmDelete(${bill.billId})">Delete</button>
                  </td>
                `;
                tbody.appendChild(row);
              });
            });
        }

        function getStatusColor(status) {
          return status === "Upcoming" ? "info" : status === "Due Now" ? "warning" : "danger";
        }

        //Confirmation for adding new data;
        document.getElementById("addBillForm").addEventListener("submit", function (e) {
          e.preventDefault();
          addFormData = Object.fromEntries(new FormData(e.target));
          bootstrap.Modal.getOrCreateInstance(document.getElementById("confirmAddModal")).show();
        });

        //Homeowner list
        document.getElementById("addBillModal").addEventListener("shown.bs.modal", function () {
          fetch("/staff/homeowners")
            .then(res => res.json())
            .then(data => {
              homeowners = data;
              displayHomeownerList(data);
            });
        });

        //Homeowner Search
        document.getElementById("homeownerSearch").addEventListener("input", function () {
          const keyword = this.value.toLowerCase();
          const filtered = homeowners.filter(h =>
            h.fullName.toLowerCase().includes(keyword) || h.email.toLowerCase().includes(keyword)
          );
          displayHomeownerList(filtered);
        });

        function displayHomeownerList(list) {
          const container = document.getElementById("homeownerList");
          container.innerHTML = "";

          list.forEach(homeowner => {
            const div = document.createElement("div");
            div.className = "homeowner-item";
            div.innerHTML = `<strong>${homeowner.fullName}</strong><div class="homeowner-email">${homeowner.email}</div>`;
            div.addEventListener("click", () => {
              document.querySelectorAll(".homeowner-item").forEach(i => i.classList.remove("selected"));
              div.classList.add("selected");

              document.getElementById("selectedHomeowner").value = homeowner.fullName;
              document.getElementById("selectedUserId").value = homeowner.userId;
            });

            container.appendChild(div);
          });

          if (list.length === 0) {
            container.innerHTML = "<div class='text-muted p-2'>No homeowners found.</div>";
          }
        }

        // Submit Add
        document.getElementById("confirmAddBtn").addEventListener("click", function () {
          const loading = document.getElementById("addLoading");
          loading.classList.remove("d-none");

          fetch("/staff/bills/add", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(addFormData)
          })
            .then(res => res.ok ? res.json() : Promise.reject())
            .then(() => {
              loading.classList.add("d-none");
              showToast("Bill added successfully!");

              // Close both modals
              bootstrap.Modal.getInstance(document.getElementById("confirmAddModal")).hide();
              bootstrap.Modal.getInstance(document.getElementById("addBillModal")).hide();

              document.getElementById("addBillForm").reset();
              loadBills(document.querySelector("#billStatusTabs .active").dataset.status);
            });
        });

        // Load edit modal
        function showEditModal(billId) {
          Promise.all([
            fetch(`/staff/bills/getbyid/${billId}`).then(res => res.json()),
            fetch("/staff/homeowners").then(res => res.json())
          ])
            .then(([bill, homeowners]) => {
              const form = document.getElementById("editBillForm");
              form.billId.value = bill.billId;
              form.billName.value = bill.billName;
              form.dueDate.value = bill.dueDate;
              form.billAmount.value = bill.billAmount;

              AllhomeownersEdit = homeowners;
              selectedHomeownerId = bill.userId;

              const matchedHomeowner = homeowners.find(h => h.userId === bill.userId);
              if (matchedHomeowner) {
                document.getElementById("editSelectedHomeowner").value = matchedHomeowner.fullName;
                document.getElementById("editSelectedUserId").value = matchedHomeowner.userId;
              } else {
                document.getElementById("editSelectedHomeowner").value = "";
                document.getElementById("editSelectedUserId").value = "";
              }

              displayEditHomeownerList(homeowners);

              bootstrap.Modal.getOrCreateInstance(document.getElementById("editBillModal")).show();
            });
        }

        //For showing the data of homeowner list
        function displayEditHomeownerList(list) {
          const container = document.getElementById("editHomeownerList");
          container.innerHTML = "";

          list.forEach(homeowner => {
            const div = document.createElement("div");
            div.className = "homeowner-item";
            div.innerHTML = `<strong>${homeowner.fullName}</strong><div class="homeowner-email">${homeowner.email}</div>`;

            if (homeowner.userId === selectedHomeownerId) {
              div.classList.add("selected");
            }

            div.addEventListener("click", () => {
              document.querySelectorAll("#editHomeownerList .homeowner-item").forEach(i => i.classList.remove("selected"));
              div.classList.add("selected");

              selectedHomeownerId = homeowner.userId;
              document.getElementById("editSelectedHomeowner").value = homeowner.fullName;
              document.getElementById("editSelectedUserId").value = homeowner.userId;
            });

            container.appendChild(div);
          });

          if (list.length === 0) {
            container.innerHTML = "<div class='text-muted p-2'>No homeowners found.</div>";
          }
        }

        //For the search input of homeowner in edit modal
        document.getElementById("editHomeownerSearch").addEventListener("input", function () {
          const keyword = this.value.toLowerCase();
          const filtered = AllhomeownersEdit.filter(h =>
            h.fullName.toLowerCase().includes(keyword) || h.email.toLowerCase().includes(keyword)
          );
          displayEditHomeownerList(filtered);
        });

        //For opening edit confirmation modal
        document.getElementById("editBillForm").addEventListener("submit", function (e) {
          e.preventDefault();
          editFormData = Object.fromEntries(new FormData(e.target)); // Store data
          bootstrap.Modal.getOrCreateInstance(document.getElementById("confirmEditModal")).show();
        });


        // Submit Edit
        document.getElementById("confirmEditBtn").addEventListener("click", function () {
          const loading = document.getElementById("editLoading");
          loading.classList.remove("d-none");

          fetch("/staff/bills/update", {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(editFormData)
          })
            .then(res => res.ok ? res.json() : Promise.reject())
            .then(() => {
              loading.classList.add("d-none");
              showToast("Bill updated successfully!", "success");

              // Close both modals
              bootstrap.Modal.getInstance(document.getElementById("confirmEditModal")).hide();
              bootstrap.Modal.getInstance(document.getElementById("editBillModal")).hide();

              loadBills(document.querySelector("#billStatusTabs .active").dataset.status);
            });
        });

        //confirmation for deletion
        function confirmDelete(id) {
          billIdToDelete = id;
          bootstrap.Modal.getOrCreateInstance(document.getElementById("confirmDeleteModal")).show();
        }

        //Confirm delete
        document.getElementById("confirmDeleteBtn").addEventListener("click", function () {
          fetch(`/staff/bills/delete/${billIdToDelete}`, {
            method: "DELETE"
          }).then(res => {
            if (res.ok) {
              showToast("Bill deleted successfully!", "danger");
              loadBills(document.querySelector("#billStatusTabs .active").dataset.status);
            }
            bootstrap.Modal.getInstance(document.getElementById("confirmDeleteModal")).hide();
          });
        });

        // Toasts Popup Message
        function showToast(message, type = "success") {
          const id = "toast" + Date.now();
          const toast = document.createElement("div");
          toast.className = `toast align-items-center text-bg-${type} border-0 show`;
          toast.id = id;
          toast.setAttribute("role", "alert");
          toast.innerHTML = `
            <div class="d-flex">
              <div class="toast-body">${message}</div>
              <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
          `;
          document.getElementById("toastContainer").appendChild(toast);
          setTimeout(() => toast.remove(), 4000);
        }

   // --------------------------------------- FOR PAYMENT FUNCTION -------------------------------------------//
   let allBills = []; 
   let selectedRow = null;
   let filterStatus = 'Paid';

    // Function to filter bills by status (Full Paid / Not Paid)
    function filterBillsByStatus(status) {
        filterStatus = status === 'Paid' ? 'Paid' : 'Not Paid';  // Set filterStatus to 'Paid' or 'Not Paid'
        // Toggle button styles based on selection
        const fullPaidButton = document.getElementById('fullPaidButton');
        const notPaidButton = document.getElementById('notPaidButton');

        if (status === 'Paid') {
            fullPaidButton.classList.add('bg-blue-700');
            fullPaidButton.classList.remove('bg-gray-400');
            notPaidButton.classList.add('bg-gray-400');
            notPaidButton.classList.remove('bg-blue-700');
        } else {
            notPaidButton.classList.add('bg-blue-700');
            notPaidButton.classList.remove('bg-gray-400');
            fullPaidButton.classList.add('bg-gray-400');
            fullPaidButton.classList.remove('bg-blue-700');
        }

        fetchBills();
    }

    // Fetch bills when page loads or when status filter changes
    async function fetchBills() {
      try {
        const response = await fetch(`/staff/bills/data/${filterStatus}`); // Adjust to your backend route
        const data = await response.json();
        allBills = data;
        renderBills(data);
      } catch (error) {
        console.error("Error fetching bills:", error);
      }
    }

    function renderBills(bills) {
      const tableBody = document.getElementById('billTableBody');
      tableBody.innerHTML = "";

      if (bills.length === 0) {
        const row = document.createElement("tr");
        row.innerHTML = `
          <td colspan="5" class="p-4 text-center text-gray-500 italic">No bills found.</td>
        `;
        tableBody.appendChild(row);
        return;
      }

      bills.forEach(bill => {
        const displayStatus = bill.status === 'Paid' ? 'Fully Paid' : 'Not Fully Paid';
        const row = document.createElement("tr");
        row.classList.add("hover:bg-gray-100", "cursor-pointer");

        row.innerHTML = `
          <td class="p-3">${bill.fullName}</td>
          <td class="p-3 text-center">${bill.billName}</td>
          <td class="p-3 text-center">${new Date(bill.dueDate).toLocaleDateString('en-US')}</td>
          <td class="p-3 text-center">${displayStatus}</td>
          <td class="p-3 text-right">₱ ${parseFloat(bill.billAmount).toFixed(2)}</td>
        `;

        // Click event to toggle dropdown and highlight
        row.addEventListener("click", () => {
          if (selectedRow) selectedRow.classList.remove("bg-blue-100");
          if (selectedRow === row) {
            selectedRow = null; // Unselect if clicked again
          } else {
            row.classList.add("bg-blue-100");
            selectedRow = row;
          }

          toggleDropdown(bill.billId, row, bill.status);
        });

        tableBody.appendChild(row);
      });
    }

    async function toggleDropdown(billId, clickedRow, status) {
        const existingDropdown = clickedRow.nextElementSibling;
        if (existingDropdown && existingDropdown.classList.contains("payment-dropdown")) {
            existingDropdown.remove();
            return;
        }

        // Remove any other open dropdowns
        document.querySelectorAll(".payment-dropdown").forEach(e => e.remove());

        try {
            // Fetch payment data for the billId
            const res = await fetch(`/staff/payments/by-bill/${billId}`);
            const data = await res.json();

            // Check if data is valid and contains payments
            const payments = data.payments || [];
            const totalAmountPaid = data.totalAmountPaid || 0;

            // Determine the background color for the payment status (Fully Paid or Not Fully Paid)
            const paymentStatusClass = status === 'Paid' ? 'bg-green-600' : 'bg-red-600';
            const paymentStatusText = status === 'Paid' ? 'Fully Paid' : 'Not Fully Paid';
            console.log(status)

            const dropdownRow = document.createElement("tr");
            dropdownRow.className = "payment-dropdown";
            dropdownRow.innerHTML = `
              <td colspan="4" class="p-4 bg-gray-50 animate-slideDown">
                <div class="flex justify-between items-center">
                    <h4 class="font-semibold text-blue-700 mb-2">Payment History
                        <span class="ml-2 text-white px-2 py-1 rounded ${paymentStatusClass}">${paymentStatusText}</span>
                    </h4>
                    <p class="font-semibold text-base">Total Paid: ₱ ${parseFloat(totalAmountPaid).toFixed(2)}</p>
                </div>
                ${payments.length > 0
                  ? `
                    <table class="w-full text-sm border">
                       <thead >
                         <tr class="${status === 'Paid' ? 'bg-green-600 text-white' : 'bg-red-600 text-white'}">
                          <th class="p-2 text-center">AMOUNT</th>
                          <th class="p-2 text-center">PAYMENT METHOD</th>
                          <th class="p-2 text-center">DATE PAID</th>
                        </tr>
                      </thead>
                      <tbody>
                        ${payments.map(p => `
                          <tr class="border-t">
                            <td class="p-2 text-center">₱ ${parseFloat(p.amountPaid).toFixed(2)}</td>
                            <td class="p-2 text-center">${p.paymentMethod}</td>
                            <td class="p-3 text-center">${new Date(p.datePaid).toLocaleDateString('en-US')}</td>
                          </tr>`).join('')}
                      </tbody>
                    </table>`
                  : `<p class="text-gray-500 italic">No payment history found.</p>`
                }
              </td>
            `;

            clickedRow.parentNode.insertBefore(dropdownRow, clickedRow.nextSibling);
        } catch (error) {
            console.error("Error fetching payment data:", error);
            // You can add some error handling UI here, such as showing an error message
        }
    }

    function filterBills() {
      const keyword = document.getElementById("searchInput").value.toLowerCase();
      const filtered = allBills.filter(b =>
        b.billName.toLowerCase().includes(keyword)
      );
      renderBills(filtered);
    }

    document.addEventListener("DOMContentLoaded", () => {
      fetchBills();
       const billsBtn = document.getElementById('billsBtn');
         const paymentsBtn = document.getElementById('paymentsBtn');
         const billsPanel = document.getElementById('billsPanel');
         const paymentsPanel = document.getElementById('paymentsPanel');

         billsBtn.addEventListener('click', () => {
             billsPanel.classList.remove('hidden');
             paymentsPanel.classList.add('hidden');

             billsBtn.classList.remove('bg-gray-200', 'text-blue-900');
             billsBtn.classList.add('bg-blue-700', 'text-white');

             paymentsBtn.classList.remove('bg-blue-700', 'text-white');
             paymentsBtn.classList.add('bg-gray-200', 'text-blue-900');
         });

         paymentsBtn.addEventListener('click', () => {
             paymentsPanel.classList.remove('hidden');
             billsPanel.classList.add('hidden');

             paymentsBtn.classList.remove('bg-gray-200', 'text-blue-900');
             paymentsBtn.classList.add('bg-blue-700', 'text-white');

             billsBtn.classList.remove('bg-blue-700', 'text-white');
             billsBtn.classList.add('bg-gray-200', 'text-blue-900');
         });
    });
</script>